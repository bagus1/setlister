generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  // Updated for private songs feature
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  password       String           @db.VarChar(255)
  role           String           @default("user") @db.VarChar(50) // user, moderator, admin
  canMakePrivate Boolean          @default(true) @map("can_make_private")
  
  // Profile Fields
  slug           String?          @unique @db.VarChar(100)
  isPublic       Boolean          @default(false) @map("is_public")
  bio            String?          @db.Text
  location       String?          @db.VarChar(255)
  instruments    String?          @db.VarChar(500) // "Bass, Vocals, Guitar"
  website        String?          @db.VarChar(500)
  openToOpportunities Boolean     @default(false) @map("open_to_opportunities")
  
  createdAt      DateTime         @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relationships
  invitations    BandInvitation[] @relation("Inviter")
  bands          BandMember[]
  createdBands   Band[]           @relation("BandCreator")
  gigDocuments   GigDocument[]    @relation("DocumentCreator")
  createdSongs   Song[]           @relation("SongCreator")
  createdLinks   Link[]           @relation("LinkCreator")
  createdSetlists Setlist[]       @relation("SetlistCreator")
  createdVenues  Venue[]          @relation("VenueCreator")
  setlistVersions SetlistVersion[]
  interactions   Interaction[]
  opportunities  Opportunity[]
  venueChangesSuggested VenueChange[] @relation("VenueChangeSuggestedBy")
  venueChangesReviewed VenueChange[] @relation("VenueChangeReviewedBy")
  recordings     Recording[]      @relation("RecordingCreator")
  photos         UserPhoto[]

  @@map("users")
  @@index([slug])
  @@index([isPublic])
}

model Vocalist {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  medleys   Medley[]
  songs     Song[]

  @@map("vocalists")
}

model Artist {
  id        Int          @id @default(autoincrement())
  name      String       @unique @db.VarChar(255)
  createdAt DateTime     @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  songs     SongArtist[]

  @@map("artists")
}

model Band {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(255)
  description  String?
  
  // EPK Basic Info
  slug         String?          @unique @db.VarChar(100)
  isPublic     Boolean          @default(false) @map("is_public")
  bio          String?          @db.Text
  tagline      String?          @db.VarChar(255)
  genres       String?          @db.VarChar(500)
  hometown     String?          @db.VarChar(255)
  formedYear   Int?             @map("formed_year")
  
  // Existing booking fields
  websiteUrl   String?          @db.VarChar(500) @map("website_url")
  epkUrl       String?          @db.VarChar(500) @map("epk_url")
  bookingPitch String?          @db.Text @map("booking_pitch")
  contactName  String?          @db.VarChar(255) @map("contact_name")
  contactEmail String?          @db.VarChar(255) @map("contact_email")
  contactPhone String?          @db.VarChar(50) @map("contact_phone")
  
  // Payment Information
  venmoHandle  String?          @db.VarChar(100) @map("venmo_handle")
  paypalEmail  String?          @db.VarChar(255) @map("paypal_email")
  checkPayee   String?          @db.VarChar(255) @map("check_payee")
  checkAddress String?          @db.Text @map("check_address")
  
  // Technical Rider Info
  minStageSize String?          @db.VarChar(100) @map("min_stage_size")
  soundRequirements String?     @db.Text @map("sound_requirements")
  lightingRequirements String?  @db.Text @map("lighting_requirements")
  setupTime    Int?             @map("setup_time") // minutes
  breakdownTime Int?            @map("breakdown_time") // minutes
  setLengthMin Int?             @map("set_length_min") // minutes
  setLengthMax Int?             @map("set_length_max") // minutes
  
  // Display Preferences
  showMembers     Boolean       @default(true) @map("show_members")
  showSetlists    Boolean       @default(false) @map("show_setlists")
  showRecordings  Boolean       @default(false) @map("show_recordings")
  showGigs        Boolean       @default(true) @map("show_gigs")
  showVenues      Boolean       @default(true) @map("show_venues")
  
  createdById  Int              @map("created_by_id")
  createdAt    DateTime         @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relationships
  invitations  BandInvitation[]
  members      BandMember[]
  songs        BandSong[]
  venues       BandVenue[]
  creator      User             @relation("BandCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  setlists     Setlist[]
  opportunities Opportunity[]
  gigs         Gig[]
  photos       BandPhoto[]
  videos       BandVideo[]
  audioSamples BandAudio[]
  logos        BandLogo[]
  pressQuotes  BandPressQuote[]
  socialLinks  BandSocialLink[]

  @@map("bands")
  @@index([slug])
  @@index([isPublic])
}

model BandMember {
  id          Int                     @id @default(autoincrement())
  userId      Int                     @map("user_id")
  bandId      Int                     @map("band_id")
  role        enum_band_members_role? @default(member)
  
  // EPK Display Fields
  displayName String?                 @db.VarChar(255) @map("display_name")
  instrument  String?                 @db.VarChar(255)
  bio         String?                 @db.Text
  photoUrl    String?                 @db.VarChar(500) @map("photo_url")
  isFeatured  Boolean                 @default(false) @map("is_featured")
  sortOrder   Int                     @default(0) @map("sort_order")
  
  createdAt   DateTime                @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                @updatedAt @map("updated_at") @db.Timestamptz(6)
  band        Band                    @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, bandId], map: "band_members_user_id_band_id")
  @@map("band_members")
}

model Song {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  key            enum_songs_key?
  time           Int?
  bpm            Int?
  vocalistId     Int?            @map("vocalist_id")
  createdById    Int?            @map("created_by_id")
  private        Boolean         @default(false)
  
  // OpenBook metadata fields
  composer       String?         @db.VarChar(255)
  lyricist       String?         @db.VarChar(255)
  style          String?         @db.VarChar(100)
  keySignature   String?         @db.VarChar(10) @map("key_signature")
  timeSignature  String?         @db.VarChar(10) @map("time_signature")
  tempo          Int?
  structure      String?         @db.Text
  copyrightInfo  String?         @db.Text @map("copyright_info")
  yearComposed   Int?            @map("year_composed")
  source         String?         @db.VarChar(100) @default("user")
  
  createdAt      DateTime        @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  bandSongs      BandSong[]
  gigDocuments   GigDocument[]
  links          Link[]
  medleySongs    MedleySong[]
  setlistSongs   SetlistSong[]
  artists        SongArtist[]
  vocalist       Vocalist?       @relation(fields: [vocalistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creator        User?           @relation("SongCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recordingSplits RecordingSplit[]

  @@map("songs")
}

model BandSong {
  id            Int          @id @default(autoincrement())
  bandId        Int          @map("band_id")
  songId        Int          @map("song_id")
  gigDocumentId Int?         @map("gig_document_id")
  vocalist      String?      @db.VarChar(255)
  bpm           Int?
  youtube       String?      @db.VarChar(500)
  audio         String?      @db.VarChar(500)
  midi          String?      @db.VarChar(500)
  leadsheet     String?      @db.VarChar(500)
  createdAt     DateTime     @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  band          Band         @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gigDocument   GigDocument? @relation(fields: [gigDocumentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song          Song         @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([bandId, songId], map: "band_songs_band_id_song_id")
  @@map("band_songs")
}

model GigDocument {
  id          Int                     @id @default(autoincrement())
  songId      Int                     @map("song_id")
  createdById Int                     @map("created_by_id")
  type        enum_gig_documents_type
  version     Int                     @default(1)
  content     String?
  isActive    Boolean?                @default(true) @map("is_active")
  createdAt   DateTime                @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                @updatedAt @map("updated_at") @db.Timestamptz(6)
  bandSongs   BandSong[]
  creator     User                    @relation("DocumentCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song        Song                    @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([songId, type, version], map: "gig_documents_song_id_type_version")
  @@map("gig_documents")
}

model Setlist {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  bandId        Int          @map("band_id")
  createdById   Int?         @map("created_by_id")
  date          DateTime?    @db.Timestamptz(6)
  isFinalized   Boolean?     @default(false) @map("is_finalized")
  recordingsUrl String?      @map("recordings_url")
  createdAt     DateTime     @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  sets          SetlistSet[]
  versions      SetlistVersion[]
  recordings    Recording[]
  band          Band         @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creator       User?        @relation("SetlistCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("setlists")
}

model SetlistSet {
  id        Int                    @id @default(autoincrement())
  setlistId Int                    @map("setlist_id")
  name      enum_setlist_sets_name
  order     Int
  createdAt DateTime               @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  setlist   Setlist                @relation(fields: [setlistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  songs     SetlistSong[]

  @@unique([setlistId, name], map: "setlist_sets_setlist_id_name")
  @@map("setlist_sets")
}

model SetlistSong {
  id           Int        @id @default(autoincrement())
  setlistSetId Int        @map("setlist_set_id")
  songId       Int        @map("song_id")
  order        Int
  createdAt    DateTime   @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  setlistSet   SetlistSet @relation(fields: [setlistSetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song         Song       @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("setlist_songs")
}

model Medley {
  id         Int               @id @default(autoincrement())
  name       String            @db.VarChar(255)
  key        enum_medleys_key?
  vocalistId Int?              @map("vocalist_id")
  createdAt  DateTime          @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  songs      MedleySong[]
  vocalist   Vocalist?         @relation(fields: [vocalistId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("medleys")
}

model MedleySong {
  id        Int      @id @default(autoincrement())
  medleyId  Int      @map("medley_id")
  songId    Int      @map("song_id")
  order     Int
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  medley    Medley   @relation(fields: [medleyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song      Song     @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([medleyId, songId], map: "medley_songs_medley_id_song_id")
  @@map("medley_songs")
}

model BandInvitation {
  id         String                      @id @db.Uuid
  bandId     Int                         @map("band_id")
  email      String                      @db.VarChar(255)
  token      String                      @unique @db.VarChar(255)
  role       enum_band_invitations_role? @default(member)
  expires_at DateTime                    @db.Timestamptz(6)
  used_at    DateTime?                   @db.Timestamptz(6)
  invitedBy  Int                         @map("invited_by")
  createdAt  DateTime                    @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime                    @updatedAt @map("updated_at") @db.Timestamptz(6)
  band       Band                        @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inviter    User                        @relation("Inviter", fields: [invitedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("band_invitations")
}

model SongArtist {
  songId    Int      @map("song_id")
  artistId  Int      @map("artist_id")
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  song      Song     @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([songId, artistId])
  @@map("song_artists")
}

model Link {
  id          Int             @id @default(autoincrement())
  songId      Int             @map("song_id")
  createdById Int?            @map("created_by_id")
  type        enum_links_type
  description String?         @db.VarChar(255)
  url         String          @db.VarChar(255)
  createdAt   DateTime        @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  song        Song            @relation(fields: [songId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creator     User?           @relation("LinkCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recordingSplit RecordingSplit?

  @@map("links")
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  createdAt DateTime  @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("password_resets")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

enum enum_band_invitations_role {
  member
}

enum enum_band_members_role {
  owner
  member
}

enum enum_gig_documents_type {
  chords
  bass_tab   @map("bass-tab")
  guitar_tab @map("guitar-tab")
  lyrics
}

enum enum_links_type {
  youtube
  spotify
  apple_music       @map("apple-music")
  soundcloud
  bandcamp
  lyrics
  tab
  bass_tab          @map("bass tab")
  chords
  guitar_tutorial   @map("guitar tutorial")
  bass_tutorial     @map("bass tutorial")
  keyboard_tutorial @map("keyboard tutorial")
  audio
  sheet_music       @map("sheet-music")
  backing_track     @map("backing-track")
  karaoke
  horn_chart        @map("horn chart")
  pdf
  midi
  other
  video
  lilypond
  postscript
}

enum enum_medleys_key {
  C
  C_  @map("C#")
  Db
  D
  D_  @map("D#")
  Eb
  E
  F
  F_  @map("F#")
  Gb
  G
  G_  @map("G#")
  Ab
  A
  A_  @map("A#")
  Bb
  B
  Cm
  C_m @map("C#m")
  Dbm
  Dm
  D_m @map("D#m")
  Ebm
  Em
  Fm
  F_m @map("F#m")
  Gbm
  Gm
  G_m @map("G#m")
  Abm
  Am
  A_m @map("A#m")
  Bbm
  Bm
}

enum enum_setlist_sets_name {
  Set_1 @map("Set 1")
  Set_2 @map("Set 2")
  Set_3 @map("Set 3")
  Set_4 @map("Set 4")
  Maybe
}

enum enum_songs_key {
  C
  C_  @map("C#")
  Db
  D
  D_  @map("D#")
  Eb
  E
  F
  F_  @map("F#")
  Gb
  G
  G_  @map("G#")
  Ab
  A
  A_  @map("A#")
  Bb
  B
  Cm
  C_m @map("C#m")
  Dbm
  Dm
  D_m @map("D#m")
  Ebm
  Em
  Fm
  F_m @map("F#m")
  Gbm
  Gm
  G_m @map("G#m")
  Abm
  Am
  A_m @map("A#m")
  Bbm
  Bm
}

model WhitelistRequest {
  id           Int      @id @default(autoincrement())
  linkType     enum_links_type @map("link_type")
  domain       String   @db.VarChar(255)
  reason       String   @db.Text
  exampleUrl   String   @db.VarChar(500) @map("example_url")
  contactEmail String   @db.VarChar(255) @map("contact_email")
  status       enum_whitelist_request_status @default(pending)
  createdAt    DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("whitelist_requests")
}

enum enum_whitelist_request_status {
  pending
  approved
  rejected
}

model WhitelistDomain {
  id        Int      @id @default(autoincrement())
  linkType  enum_links_type @map("link_type")
  domain    String   @db.VarChar(255)
  pattern   String   @db.Text
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([linkType, domain])
  @@map("whitelist_domains")
}

model SetlistVersion {
  id             Int      @id @default(autoincrement())
  setlistId      Int      @map("setlist_id")
  versionNumber  Int      @map("version_number")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  createdById    Int?     @map("created_by_id")
  setlistData    Json     @map("setlist_data") @db.JsonB
  changeSummary  String?  @map("change_summary") @db.Text

  setlist        Setlist  @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  createdBy      User?    @relation(fields: [createdById], references: [id])

  @@unique([setlistId, versionNumber])
  @@map("setlist_versions")
}

model Venue {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  address     String?      @db.Text
  city        String?      @db.VarChar(255)
  state       String?      @db.VarChar(100)
  zipCode     String?      @db.VarChar(20) @map("zip_code")
  phone       String?      @db.VarChar(50)
  email       String?      @db.VarChar(255)
  website     String?      @db.VarChar(500)
  capacity    Int?
  venueTypeId Int?         @map("venue_type_id")
  venueType   VenueType?   @relation(fields: [venueTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  musicStyle  String?      @db.VarChar(255) @map("music_style")
  stageLocation String?    @db.VarChar(20) @map("stage_location")
  soundSystem String?      @db.Text @map("sound_system")
  stageSize   String?      @db.Text @map("stage_size")
  bookingStatus String?    @db.VarChar(100) @map("booking_status")
  fees        String?      @db.Text
  leadTime    String?      @db.VarChar(100) @map("lead_time")
  notes       String?      @db.Text
  createdById Int?         @map("created_by_id")
  createdAt   DateTime     @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  bandVenues  BandVenue[]
  socials     VenueSocial[]
  contacts    VenueContact[]
  opportunities Opportunity[]
  gigs        Gig[]
  creator     User?        @relation("VenueCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  changes     VenueChange[]

  @@map("venues")
}

model BandVenue {
  id        Int      @id @default(autoincrement())
  bandId    Int      @map("band_id")
  venueId   Int      @map("venue_id")
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  band      Band     @relation(fields: [bandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([bandId, venueId], map: "band_venues_band_id_venue_id")
  @@map("band_venues")
}

model VenueType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  venues      Venue[]

  @@map("venue_types")
}

model VenueSocialType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  displayName String   @db.VarChar(100)
  iconClass   String?  @db.VarChar(50) // Bootstrap icon class
  urlTemplate String?  @db.VarChar(500) // URL template for auto-generation
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  socials     VenueSocial[]

  @@map("venue_social_types")
}

model VenueSocial {
  id        Int      @id @default(autoincrement())
  venueId   Int      @map("venue_id")
  socialTypeId Int   @map("social_type_id")
  handle    String   @db.VarChar(255) // @username or page name
  url       String?  @db.VarChar(500) // Full URL
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  socialType VenueSocialType @relation(fields: [socialTypeId], references: [id], onDelete: Cascade)

  @@unique([venueId, socialTypeId, handle])
  @@map("venue_socials")
}

model VenueContactType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  displayName String   @db.VarChar(100)
  iconClass   String?  @db.VarChar(50) // Bootstrap icon class
  urlTemplate String?  @db.VarChar(500) // URL template for auto-generation
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  contacts    VenueContact[]

  @@map("venue_contact_types")
}

model VenueContact {
  id          Int      @id @default(autoincrement())
  venueId     Int      @map("venue_id")
  contactTypeId Int    @map("contact_type_id")
  value       String   @db.VarChar(255) // The actual phone/email/website/handle
  url         String?  @db.VarChar(500) // Full URL if applicable
  label       String?  @db.VarChar(100) // 'Booking', 'General', 'Press', etc.
  isPrimary   Boolean  @default(false) @map("is_primary")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  contactType VenueContactType @relation(fields: [contactTypeId], references: [id], onDelete: Cascade)

  @@unique([venueId, contactTypeId, value])
  @@map("venue_contacts")
}

model Opportunity {
  id        Int      @id @default(autoincrement())
  name      String
  notes     String?  @db.Text
  status    OpportunityStatus @default(PROSPECTING)
  gigDate   DateTime?
  offerValue Float?
  bandId    Int
  band      Band     @relation(fields: [bandId], references: [id])
  venueId   Int
  venue     Venue    @relation(fields: [venueId], references: [id])
  createdById Int
  creator   User     @relation(fields: [createdById], references: [id])
  interactions Interaction[]
  gig       Gig?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("opportunities")
}

model Interaction {
  id            Int      @id @default(autoincrement())
  type          String   @db.VarChar(50)  // References venue_contact_types.name
  notes         String   @db.Text
  messageContent String? @db.Text @map("message_content")
  previousResponse String? @db.Text @map("previous_response")
  outcome       String?  @db.VarChar(50)
  nextSteps     String?  @db.Text @map("next_steps")
  interactionDate DateTime
  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())

  @@map("interactions")
}

enum OpportunityStatus {
  PROSPECTING
  CONTACTED
  NEGOTIATING
  NEED_CONFIRMATION
  BOOKED
  ARCHIVED
}

model Gig {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  gigDate     DateTime @map("gig_date")
  loadInTime  DateTime? @map("load_in_time")
  soundCheckTime DateTime? @map("sound_check_time")
  startTime   DateTime? @map("start_time")
  endTime     DateTime? @map("end_time")
  fee         Float?
  notes       String?  @db.Text
  ticketLink  String?  @map("ticket_link") @db.VarChar(500)
  facebookEventLink String? @map("facebook_event_link") @db.VarChar(500)
  status      GigStatus @default(CONFIRMED)
  
  // Relationships
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  venueId     Int      @map("venue_id")
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  opportunityId Int?   @unique @map("opportunity_id")
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("gigs")
}

enum GigStatus {
  CONFIRMED
  PENDING
  CANCELLED
  COMPLETED
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamptz(6)

  @@map("sessions")
}

model VenueChange {
  id          Int      @id @default(autoincrement())
  venueId     Int      @map("venue_id")
  fieldName   String   @db.VarChar(100) @map("field_name") // 'phone', 'address', 'website', etc.
  currentValue String? @db.Text @map("current_value")
  suggestedValue String @db.Text @map("suggested_value")
  reason      String?  @db.Text // Why this change is needed
  status      String   @default("pending") @db.VarChar(20) // 'pending', 'approved', 'rejected'
  suggestedByUserId Int @map("suggested_by_user_id")
  reviewedByUserId Int? @map("reviewed_by_user_id")
  reviewedAt  DateTime? @map("reviewed_at") @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  suggestedBy User     @relation("VenueChangeSuggestedBy", fields: [suggestedByUserId], references: [id])
  reviewedBy  User?    @relation("VenueChangeReviewedBy", fields: [reviewedByUserId], references: [id])

  @@map("venue_changes")
  @@index([venueId])
  @@index([status])
  @@index([createdAt])
}

// Full set recording from a gig/rehearsal
model Recording {
  id            Int       @id @default(autoincrement())
  setlistId     Int       @map("setlist_id")
  setlist       Setlist   @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  
  filePath      String    @db.VarChar(500) @map("file_path")
  fileSize      BigInt?   @map("file_size")  // In bytes
  duration      Int       // Total duration in seconds
  format        String    @default("webm") @db.VarChar(10)
  
  createdById   Int       @map("created_by_id")
  creator       User      @relation("RecordingCreator", fields: [createdById], references: [id])
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  
  isProcessed   Boolean   @default(false) @map("is_processed")
  processedAt   DateTime? @map("processed_at") @db.Timestamptz(6)
  
  splits        RecordingSplit[]
  
  @@map("recordings")
  @@index([setlistId])
  @@index([createdById])
}

// Individual song extracted from a recording
model RecordingSplit {
  id            Int       @id @default(autoincrement())
  recordingId   Int       @map("recording_id")
  recording     Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  
  songId        Int       @map("song_id")
  song          Song      @relation(fields: [songId], references: [id])
  
  startTime     Float     @map("start_time")  // Seconds in original recording
  endTime       Float     @map("end_time")    // Seconds in original recording
  duration      Float     // Calculated duration
  
  filePath      String?   @db.VarChar(500) @map("file_path")  // Extracted segment file
  
  linkId        Int?      @unique @map("link_id")
  link          Link?     @relation(fields: [linkId], references: [id])
  
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  
  @@map("recording_splits")
  @@index([recordingId])
  @@index([songId])
}

// EPK Models

model BandPhoto {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  filePath    String   @db.VarChar(500) @map("file_path")
  caption     String?  @db.VarChar(500)
  category    String?  @db.VarChar(50) // 'performance', 'promo', 'poster', 'candid'
  isPrimary   Boolean  @default(false) @map("is_primary")
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_photos")
  @@index([bandId])
  @@index([isPrimary])
}

model BandVideo {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  title       String   @db.VarChar(255)
  description String?  @db.Text
  
  // Either YouTube URL or uploaded file
  youtubeUrl  String?  @db.VarChar(500) @map("youtube_url")
  filePath    String?  @db.VarChar(500) @map("file_path")
  
  thumbnailUrl String? @db.VarChar(500) @map("thumbnail_url")
  duration    Int?     // seconds
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_videos")
  @@index([bandId])
}

model BandAudio {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  title       String   @db.VarChar(255)
  description String?  @db.Text
  
  // Either external URL (Spotify, SoundCloud) or uploaded file
  externalUrl String?  @db.VarChar(500) @map("external_url")
  filePath    String?  @db.VarChar(500) @map("file_path")
  
  duration    Int?     // seconds
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_audio")
  @@index([bandId])
}

model BandLogo {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  name        String   @db.VarChar(255) // 'Transparent', 'Neon', 'Gray Circle'
  filePath    String   @db.VarChar(500) @map("file_path")
  fileType    String   @db.VarChar(50) @map("file_type") // 'png', 'jpg', 'svg', 'ai', 'pdf'
  description String?  @db.Text
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_logos")
  @@index([bandId])
}

model BandPressQuote {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  quote       String   @db.Text
  attribution String   @db.VarChar(255) // 'Michael Belochi, owner of BOCO Cider'
  source      String?  @db.VarChar(255) // Publication or venue name
  date        DateTime? @db.Date
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_press_quotes")
  @@index([bandId])
}

model BandSocialLink {
  id          Int      @id @default(autoincrement())
  bandId      Int      @map("band_id")
  band        Band     @relation(fields: [bandId], references: [id], onDelete: Cascade)
  
  platform    String   @db.VarChar(50) // 'spotify', 'facebook', 'instagram', 'youtube', 'twitter', 'website'
  url         String   @db.VarChar(500)
  handle      String?  @db.VarChar(255) // @username if applicable
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("band_social_links")
  @@index([bandId])
  @@index([platform])
}

// User Profile Photos
model UserPhoto {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filePath    String   @db.VarChar(500) @map("file_path")
  caption     String?  @db.VarChar(500)
  isPrimary   Boolean  @default(false) @map("is_primary")
  sortOrder   Int      @default(0) @map("sort_order")
  
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@map("user_photos")
  @@index([userId])
  @@index([isPrimary])
}

