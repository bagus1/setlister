<%
// Helper to get token for a specific view type
const shareTokens = setlist.shareTokens || {};
function getTokenForView(viewType) {
    if (!shareTokens || typeof shareTokens !== 'object') return null;
    for (const [token, view] of Object.entries(shareTokens)) {
        if (view === viewType) return token;
    }
    return null;
}
%>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1><%= setlist.band.name %> Recordings</h1>
                    <h2 class="h5 text-muted"><%= setlist.title %></h2>
                </div>
                <div class="d-flex gap-2">
                    <% if (typeof quotaStatus !== 'undefined' && quotaStatus.isOverQuota) { %>
                    <button onclick="event.preventDefault(); event.stopPropagation(); alert('Storage quota exceeded. Please delete old files or upgrade your plan.'); return false;" 
                            class="btn btn-danger" 
                            style="opacity: 0.65; cursor: not-allowed;"
                            title="Storage quota exceeded. Please delete old files or upgrade your plan.">
                        <i class="bi bi-record-circle"></i> Record This Set
                    </button>
                    <% } else { %>
                    <button onclick="startRecording('<%= setlist.id %>')" class="btn btn-danger">
                        <i class="bi bi-record-circle"></i> Record This Set
                    </button>
                    <% } %>
                    <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Setlist
                    </a>
                    <a href="/bands/<%= setlist.band.id %>" class="btn btn-outline-secondary">
                        <i class="bi bi-people"></i> Back to Band
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Upload Recording Section (top position if no recordings) -->
    <% if (!recordings || recordings.length === 0) { %>
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-cloud-upload"></i> Upload Existing Recording
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-3">
                        Already have a recording from another device? Upload it here and split it into individual songs.
                    </p>
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="audioFile" class="form-label">Select Audio File</label>
                            <input type="file" class="form-control" id="audioFile" name="audioFile" 
                                   accept=".mp3,.m4a,.ogg,.wav" required>
                            <div class="form-text">
                                Accepted formats: MP3, M4A, OGG, WAV (MP3 recommended for smaller file sizes)
                            </div>
                        </div>
                            <% if (typeof quotaStatus !== 'undefined' && quotaStatus.isOverQuota) { %>
                            <button type="button" class="btn btn-primary" 
                                    style="opacity: 0.65; cursor: not-allowed;"
                                    onclick="event.preventDefault(); event.stopPropagation(); alert('Storage quota exceeded. Please delete old files or upgrade your plan.'); return false;"
                                    title="Storage quota exceeded. Please delete old files or upgrade your plan.">
                                <i class="bi bi-upload"></i> Upload Recording
                            </button>
                            <% } else { %>
                            <button type="submit" class="btn btn-primary" id="uploadBtn">
                                <i class="bi bi-upload"></i> Upload Recording
                            </button>
                            <% } %>
                        <div id="uploadProgress" class="mt-3" style="display: none;">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                            <small class="text-muted mt-1 d-block">Uploading...</small>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <% } %>

    <% 
    // Collect all splits with audio files from all recordings
    const allSplits = [];
    recordings.forEach(recording => {
        if (recording.splits && recording.splits.length > 0) {
            recording.splits.forEach(split => {
                // Only include splits that have both a file path and an associated song
                if (split.filePath && split.song) {
                    allSplits.push({
                        ...split,
                        recordingDate: recording.createdAt,
                        recordingId: recording.id
                    });
                }
            });
        }
    });
    
    // Sort by recording date (oldest first), then by split ID
    allSplits.sort((a, b) => {
        const dateCompare = new Date(a.recordingDate) - new Date(b.recordingDate);
        if (dateCompare !== 0) return dateCompare;
        return a.id - b.id;
    });
    %>

    <div class="row">
        <!-- Left Column (8/12) - Recordings List -->
        <div class="col-md-8">
            
            <% if (recordings && recordings.length > 0) { %>
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-music-note-list"></i> All Recordings (<%= recordings.length %>)
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            <% recordings.forEach((recording, index) => { %>
                                <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>" 
                                   class="list-group-item list-group-item-action text-decoration-none">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1 text-dark">
                                                <i class="bi bi-<%= recording.isProcessed ? 'check-circle text-success' : 'hourglass-split text-warning' %>"></i>
                                                Recording #<%= recordings.length - index %>
                                                <% if (recording.isProcessed) { %>
                                                    <span class="badge bg-success ms-2">Processed</span>
                                                <% } else { %>
                                                    <span class="badge bg-warning ms-2">Not Split</span>
                                                <% } %>
                                                <% 
                                                // Extract filename from filePath
                                                const filename = recording.filePath.split('/').pop() || 'Unknown';
                                                const format = filename.split('.').pop() || recording.format || 'webm';
                                                %>
                                                <span class="badge bg-secondary ms-2"><%= format.toUpperCase() %></span>
                                            </h6>
                                            <div class="small text-muted mb-1">
                                                <i class="bi bi-file-earmark-music"></i> <%= filename %>
                                            </div>
                                            <div class="small text-muted mb-2">
                                                <i class="bi bi-calendar"></i> 
                                                <%= new Date(recording.createdAt).toLocaleString('en-US', { 
                                                    weekday: 'short',
                                                    year: 'numeric', 
                                                    month: 'short', 
                                                    day: 'numeric',
                                                    hour: 'numeric',
                                                    minute: '2-digit'
                                                }) %>
                                                • 
                                                <i class="bi bi-person"></i> <%= recording.creator.username %>
                                                • 
                                                <i class="bi bi-clock"></i> <%= Math.floor(recording.duration / 60) %>:<%= (recording.duration % 60).toString().padStart(2, '0') %>
                                                <% if (recording.fileSize) { %>
                                                    • 
                                                    <%= (Number(recording.fileSize) / (1024 * 1024)).toFixed(1) %> MB
                                                <% } %>
                                            </div>
                                            <% if (recording.isProcessed && recording.splits.length > 0) { %>
                                                <div class="small text-muted">
                                                    <i class="bi bi-scissors text-success"></i> 
                                                    Split into <%= recording.splits.length %> song<%= recording.splits.length !== 1 ? 's' : '' %>
                                                </div>
                                            <% } %>
                                        </div>
                                        <div class="text-end">
                                            <i class="bi bi-chevron-right text-muted"></i>
                                        </div>
                                    </div>
                                </a>
                            <% }) %>
                        </div>
                    </div>
                </div>
                
                <!-- Upload Recording Section (bottom position if recordings exist) -->
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-cloud-upload"></i> Upload Existing Recording
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">
                            Already have a recording from another device? Upload it here.
                        </p>
                        <form id="uploadForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="audioFile" class="form-label">Select Audio File</label>
                                <input type="file" class="form-control" id="audioFile" name="audioFile" 
                                       accept=".mp3,.m4a,.ogg,.wav" required>
                                <div class="form-text">
                                    Accepted formats: MP3, M4A, OGG, WAV (MP3 recommended for smaller file sizes)
                                </div>
                            </div>
                            <% if (typeof quotaStatus !== 'undefined' && quotaStatus.isOverQuota) { %>
                            <button type="button" class="btn btn-primary w-100" 
                                    style="opacity: 0.65; cursor: not-allowed;"
                                    onclick="event.preventDefault(); event.stopPropagation(); alert('Storage quota exceeded. Please delete old files or upgrade your plan.'); return false;"
                                    title="Storage quota exceeded. Please delete old files or upgrade your plan.">
                                <i class="bi bi-upload"></i> Upload Recording
                            </button>
                            <% } else { %>
                            <button type="submit" class="btn btn-primary w-100" id="uploadBtn">
                                <i class="bi bi-upload"></i> Upload Recording
                            </button>
                            <% } %>
                            <div id="uploadProgress" class="mt-3" style="display: none;">
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" style="width: 0%"></div>
                                </div>
                                <small class="text-muted mt-1 d-block">Uploading...</small>
                            </div>
                        </form>
                    </div>
                </div>
            <% } else { %>
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-music-note-beamed" style="font-size: 4rem; color: #6c757d;"></i>
                        <h4 class="mt-3">No Recordings Yet</h4>
                        <p class="text-muted">
                            Record your gigs and rehearsals to keep track of your performances
                        </p>
                        <% if (typeof quotaStatus !== 'undefined' && quotaStatus.isOverQuota) { %>
                        <button onclick="event.preventDefault(); event.stopPropagation(); alert('Storage quota exceeded. Please delete old files or upgrade your plan.'); return false;" 
                                class="btn btn-danger btn-lg mt-2" 
                                style="opacity: 0.65; cursor: not-allowed;"
                                title="Storage quota exceeded. Please delete old files or upgrade your plan.">
                            <i class="bi bi-record-circle"></i> Record This Set
                        </button>
                        <% } else { %>
                        <button onclick="startRecording('<%= setlist.id %>')" class="btn btn-danger btn-lg mt-2">
                            <i class="bi bi-record-circle"></i> Record This Set
                        </button>
                        <% } %>
                    </div>
                </div>
            <% } %>
        </div>
        <!-- End Left Column -->

        <!-- Right Column (4/12) - Player Panel -->
        <div class="col-md-4">
            <% if (allSplits.length > 0) { %>
                <!-- Link to Player -->
                <div class="card mb-4 sticky-top" style="top: 20px;">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-play-circle"></i> Play All Recorded Songs
                        </h5>
                        <div class="mt-2">
                            <span class="badge bg-info">
                                <i class="bi bi-music-note-list"></i> <%= allSplits.length %> song<%= allSplits.length !== 1 ? 's' : '' %>
                            </span>
                        </div>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="bi bi-play-btn" style="font-size: 4rem; color: #0d6efd;"></i>
                        <h4 class="mt-3">Player Available</h4>
                        <p class="text-muted mb-4">
                            All split recordings can be played sequentially in the player
                        </p>
                        <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/player?t=<%= getTokenForView('player') || '' %>" class="btn btn-primary btn-lg">
                            <i class="bi bi-play-circle"></i> Open Player
                        </a>
                    </div>
                </div>
            <% } %>
        </div>
        <!-- End Right Column -->
    </div>
</div>

<script src="/js/chunked-upload.js"></script>

<script>
// Promote split to song's global links
async function promoteSplitToSong(splitId, songId, songTitle) {
    if (!confirm(`Add this recording of "${songTitle}" to the song's links?\n\nThis will make it visible on the global song page.`)) {
        return;
    }
    
    const button = event.target.closest('.promote-btn');
    const originalHtml = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
    
    try {
        const response = await fetch(`/setlists/<%= setlist.id %>/recordings/splits/${splitId}/promote`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ songId })
        });
        
        if (response.ok) {
            // Replace button with success badge
            const badge = document.createElement('span');
            badge.className = 'badge bg-success ms-2';
            badge.title = 'Promoted to song';
            badge.innerHTML = '<i class="bi bi-rocket-takeoff-fill"></i>';
            button.parentNode.replaceChild(badge, button);
        } else {
            const error = await response.json();
            alert(error.error || 'Failed to add to song');
            button.disabled = false;
            button.innerHTML = originalHtml;
        }
    } catch (error) {
        console.error('Promote error:', error);
        alert('Failed to add to song. Please try again.');
        button.disabled = false;
        button.innerHTML = originalHtml;
    }
}

// Handle file upload
const uploadForm = document.getElementById('uploadForm');
if (uploadForm) {
    uploadForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const fileInput = document.getElementById('audioFile');
        const file = fileInput.files[0];
        
        if (!file) {
            alert('Please select a file');
            return;
        }
        
        // Show progress
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressBar = uploadProgress.querySelector('.progress-bar');
        
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Uploading...';
        uploadProgress.style.display = 'block';
        
        // Create FormData
        const formData = new FormData();
        formData.append('audioFile', file);
        
        console.log('Starting upload for file:', file.name, 'Size:', file.size);
        
        // Check if file is large enough to use chunked upload (>100MB)
        const CHUNK_THRESHOLD = 100 * 1024 * 1024; // 100MB
        
        console.log('File size:', file.size, 'bytes');
        console.log('Chunk threshold:', CHUNK_THRESHOLD, 'bytes');
        console.log('ChunkedUploader available:', typeof ChunkedUploader);
        
        if (file.size > CHUNK_THRESHOLD) {
            console.log('Large file detected, using chunked upload...');
            if (typeof ChunkedUploader === 'undefined') {
                alert('ChunkedUploader class not loaded. Please refresh the page.');
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload and Split Recording';
                uploadProgress.style.display = 'none';
                return;
            }
            await uploadFileChunked(file, uploadBtn, uploadProgress, progressBar);
        } else {
            console.log('Small file detected, using regular upload...');
            await uploadFileRegular(file, uploadBtn, uploadProgress, progressBar);
        }
    });
}

// Regular upload for smaller files
async function uploadFileRegular(file, uploadBtn, uploadProgress, progressBar) {
    const formData = new FormData();
    formData.append('audioFile', file);
    
    const xhr = new XMLHttpRequest();
    
    // Track upload progress
    xhr.upload.addEventListener('progress', (e) => {
        if (e.lengthComputable) {
            const percentComplete = (e.loaded / e.total) * 100;
            progressBar.style.width = percentComplete + '%';
            console.log('Upload progress:', percentComplete.toFixed(2) + '%');
        }
    });
    
    return new Promise((resolve, reject) => {
        // Handle completion
        xhr.addEventListener('load', () => {
            console.log('Upload complete. Status:', xhr.status);
            console.log('Response:', xhr.responseText);
            
            if (xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    console.log('Parsed response:', response);
                    // Redirect to recording detail page
                    window.location.href = `/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/${response.recordingId}`;
                } catch (parseError) {
                    console.error('Failed to parse response:', parseError);
                    alert('Upload succeeded but failed to process response. Please refresh the page.');
                    uploadBtn.disabled = false;
                    uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload and Split Recording';
                    uploadProgress.style.display = 'none';
                }
            } else {
                console.error('Upload failed with status:', xhr.status);
                alert('Upload failed. Server returned status: ' + xhr.status);
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload and Split Recording';
                uploadProgress.style.display = 'none';
            }
        });
        
        // Handle error
        xhr.addEventListener('error', (e) => {
            console.error('XHR error event:', e);
            alert('Upload failed due to network error. Please try again.');
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload and Split Recording';
            uploadProgress.style.display = 'none';
        });
        
        // Send request
        xhr.open('POST', '/setlists/<%= setlist.id %>/recordings/upload');
        console.log('Sending request to:', '/setlists/<%= setlist.id %>/recordings/upload');
        xhr.send(formData);
    });
}

// Chunked upload for large files
async function uploadFileChunked(file, uploadBtn, uploadProgress, progressBar) {
    try {
        const uploader = new ChunkedUploader(file);
        
        const result = await uploader.uploadChunks('<%= setlist.id %>', (progress) => {
            progressBar.style.width = progress.percentage + '%';
            uploadBtn.innerHTML = `<i class="bi bi-hourglass-split"></i> Uploading chunks... ${progress.percentage}% (${progress.loaded}/${progress.total})`;
            console.log(`Chunk upload progress: ${progress.percentage}% (${progress.loaded}/${progress.total} chunks)`);
        });
        
        console.log('Chunked upload successful:', result);
        
        // Redirect to recording detail page
        window.location.href = `/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/${result.recordingId}`;
        
    } catch (error) {
        console.error('Chunked upload failed:', error);
        alert(`Upload failed: ${error.message}`);
        uploadBtn.disabled = false;
        uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload and Split Recording';
        uploadProgress.style.display = 'none';
    }
}

// --- New functions specifically for Peaks.js upload ---

async function uploadFileRegularForPeaks(file, uploadBtn, uploadProgress, progressBar) {
    const formData = new FormData();
    formData.append('audioFile', file);
    
    const xhr = new XMLHttpRequest();
    
    xhr.upload.addEventListener('progress', (e) => {
        if (e.lengthComputable) {
            const percentComplete = (e.loaded / e.total) * 100;
            progressBar.style.width = percentComplete + '%';
        }
    });
    
    return new Promise((resolve, reject) => {
        xhr.addEventListener('load', () => {
            if (xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    // Redirect to recording detail page
                    window.location.href = `/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/${response.recordingId}`;
                } catch (parseError) {
                    alert('Upload succeeded but failed to process response.');
                    reject(parseError);
                }
            } else {
                alert('Upload failed. Server returned status: ' + xhr.status);
                reject(new Error('Upload failed'));
            }
        });
        
        xhr.addEventListener('error', (e) => {
            alert('Upload failed due to network error.');
            reject(e);
        });
        
        xhr.open('POST', '/setlists/<%= setlist.id %>/recordings/upload');
        xhr.send(formData);
    });
}

async function uploadFileChunkedForPeaks(file, uploadBtn, uploadProgress, progressBar) {
    try {
        const uploader = new ChunkedUploader(file);
        const result = await uploader.uploadChunks('<%= setlist.id %>', (progress) => {
            progressBar.style.width = progress.percentage + '%';
            uploadBtn.innerHTML = `<i class="bi bi-hourglass-split"></i> Uploading... ${progress.percentage}%`;
        });
        
        // Redirect to recording detail page
        window.location.href = `/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/${result.recordingId}`;
        
    } catch (error) {
        console.error('Chunked upload failed:', error);
        alert(`Upload failed: ${error.message}`);
        uploadBtn.disabled = false;
        uploadBtn.innerHTML = '<i class="bi bi-graph-up-arrow"></i> Upload with Peaks.js';
        uploadProgress.style.display = 'none';
        throw error;
    }
}


</script>


