<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1><i class="bi bi-play-circle"></i> <%= setlist.title %></h1>
                </div>
                <div class="d-flex gap-2">
                    <% if (shareToken && (!isBandMember)) { %>
                        <!-- Public view with share token -->
                        <span class="badge bg-info">
                            <i class="bi bi-globe"></i> Public View
                        </span>
                    <% } %>
                    <% if (typeof isBandMember !== 'undefined' && isBandMember) { %>
                        <!-- Logged-in band member view -->
                        <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Back to Recordings
                        </a>
                        <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>" class="btn btn-outline-secondary">
                            <i class="bi bi-list-check"></i> Back to Setlist
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <% 
            // Collect all splits with audio files from all recordings
            const allSplits = [];
            recordings.forEach(recording => {
                if (recording.splits && recording.splits.length > 0) {
                    recording.splits.forEach(split => {
                        // Only include splits that have both a file path and an associated song
                        if (split.filePath && split.song) {
                            allSplits.push({
                                ...split,
                                recordingDate: recording.createdAt,
                                recordingId: recording.id
                            });
                        }
                    });
                }
            });
            
            // Sort by recording date (oldest first), then by split ID
            allSplits.sort((a, b) => {
                const dateCompare = new Date(a.recordingDate) - new Date(b.recordingDate);
                if (dateCompare !== 0) return dateCompare;
                return a.id - b.id;
            });
            %>
            
            <% if (allSplits.length > 0) { %>
                <!-- Master Player for All Splits -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-play-circle"></i> Play All Recorded Songs
                        </h5>
                        <div class="mt-2">
                            <span class="badge bg-info">
                                <i class="bi bi-music-note-list"></i> <%= allSplits.length %> song<%= allSplits.length !== 1 ? 's' : '' %>
                            </span>
                        </div>
                    </div>
                    <div class="card-body text-center">
                        <audio id="audioPlayer" controls class="w-100">
                            <source src="" type="audio/mpeg">
                            Your browser does not support the audio element.
                        </audio>
                        
                        <!-- Currently Playing Title -->
                        <div class="mt-3">
                            <p class="mb-0" id="currentSongTitle" style="font-size: 1.1rem; font-weight: 500;">
                                <i class="bi bi-music-note-beamed"></i> <span id="currentSongName">Select a song to play</span>
                            </p>
                        </div>
                        
                        <div class="mt-3">
                            <button id="prevBtn" class="btn btn-outline-primary me-2" disabled>
                                <i class="bi bi-skip-backward-fill"></i> Previous
                            </button>
                            <button id="restartBtn" class="btn btn-outline-warning me-2" disabled>
                                <i class="bi bi-arrow-repeat"></i> Restart
                            </button>
                            <button id="nextBtn" class="btn btn-outline-primary" disabled>
                                <i class="bi bi-skip-forward-fill"></i> Next
                            </button>
                        </div>
                        
                        <!-- Mini Playlist -->
                        <div class="mt-3 text-start">
                            <small class="text-muted d-block mb-2">Now Playing:</small>
                            <ul id="miniPlaylist" class="list-group list-group-flush">
                                <% allSplits.forEach((split, index) => { %>
                                    <li class="list-group-item mini-playlist-item py-2" 
                                        data-index="<%= index %>"
                                        data-split-id="<%= split.id %>"
                                        data-url="<%= split.filePath %>"
                                        data-title="<%= split.song.title %>"
                                        data-is-skipped="<%= split.isSkipped ? 'true' : 'false' %>">
                                        <div class="d-flex align-items-center">
                                            <span class="badge bg-light text-dark me-2" style="width: 30px;">
                                                <%= index + 1 %>
                                            </span>
                                            <div class="flex-grow-1 song-name-clickable" style="cursor: pointer;" onclick="loadTrackFromElement(this)">
                                                <small class="song-title"><%= split.song.title %></small>
                                            </div>
                                            <% if (typeof isBandMember !== 'undefined' && isBandMember) { %>
                                                <!-- Only show buttons for band members, not public view -->
                                                <% if (split.linkId) { %>
                                                    <span class="badge bg-success ms-2" title="Promoted to song">
                                                        <i class="bi bi-rocket-takeoff-fill"></i>
                                                    </span>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-outline-secondary ms-2 skip-btn" 
                                                            data-index="<%= index %>"
                                                            title="Skip this song"
                                                            onclick="event.stopPropagation(); toggleSkipSong(<%= index %>)">
                                                        <i class="bi bi-skip-forward"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning ms-1 promote-btn" 
                                                            data-split-id="<%= split.id %>"
                                                            data-song-id="<%= split.songId %>"
                                                            data-song-title="<%= split.song.title %>"
                                                            title="Add as Link to Song"
                                                            onclick="event.stopPropagation(); promoteSplitToSong(<%= split.id %>, <%= split.songId %>, '<%= split.song.title.replace(/'/g, "\\'") %>')">
                                                        <i class="bi bi-rocket-takeoff"></i>
                                                    </button>
                                                <% } %>
                                            <% } %>
                                        </div>
                                    </li>
                                <% }) %>
                            </ul>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-music-note-beamed" style="font-size: 4rem; color: #6c757d;"></i>
                        <h4 class="mt-3">No Split Recordings Yet</h4>
                        <p class="text-muted">
                            Recordings need to be split into individual songs before they can be played here.
                        </p>
                    </div>
                </div>
            <% } %>
        </div>
    </div>
</div>

<style>
.mini-playlist-item {
    transition: background 0.2s, color 0.2s;
}

.song-name-clickable:hover {
    text-decoration: underline;
}

.mini-playlist-item:hover {
    background: #343a40 !important;
    color: white !important;
}

.mini-playlist-item:hover .song-title {
    color: white !important;
}

.mini-playlist-item:hover .badge:not(.bg-success) {
    background: #495057 !important;
    color: white !important;
}

/* Keep promote and skip buttons visible and clickable */
.promote-btn, .skip-btn {
    z-index: 10;
    position: relative;
    flex-shrink: 0;
}

.promote-btn:hover, .skip-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* Skipped song styling */
.mini-playlist-item.skipped {
    opacity: 0.5;
}

.mini-playlist-item.skipped .song-title {
    text-decoration: line-through;
}

.mini-playlist-item.active {
    background: #212529 !important;
    color: white !important;
}

.mini-playlist-item.active .song-title {
    color: white !important;
}

.mini-playlist-item.active .badge {
    background: #0d6efd !important;
    color: white !important;
}
</style>

<script>
let currentTrackIndex = 0;
let playlist = [];
const skippedSongs = new Set(); // Track which songs are skipped
const audioPlayer = document.getElementById('audioPlayer');
const prevBtn = document.getElementById('prevBtn');
const restartBtn = document.getElementById('restartBtn');
const nextBtn = document.getElementById('nextBtn');

// Initialize playlist from DOM
document.addEventListener('DOMContentLoaded', function() {
    const playlistItems = document.querySelectorAll('.mini-playlist-item');
    playlist = Array.from(playlistItems).map(item => ({
        url: item.dataset.url,
        title: item.dataset.title
    }));
    
    // Load initial skip state from database
    playlistItems.forEach((item, index) => {
        const isSkipped = item.dataset.isSkipped === 'true';
        if (isSkipped) {
            skippedSongs.add(index);
            item.style.opacity = '0.5';
            item.style.textDecoration = 'line-through';
            const skipBtn = item.querySelector('.skip-btn');
            if (skipBtn) {
                skipBtn.classList.remove('btn-outline-secondary');
                skipBtn.classList.add('btn-danger');
                skipBtn.innerHTML = '<i class="bi bi-x-circle"></i>';
                skipBtn.title = 'Un-skip this song';
            }
        }
    });
    
    if (playlist.length > 0 && audioPlayer) {
        updateButtons();
        // Load first non-skipped track
        let firstNonSkipped = 0;
        while (firstNonSkipped < playlist.length && skippedSongs.has(firstNonSkipped)) {
            firstNonSkipped++;
        }
        if (firstNonSkipped < playlist.length) {
            loadTrack(firstNonSkipped);
        }
    }
});

// Load and play a track
function loadTrack(index) {
    if (index < 0 || index >= playlist.length || !audioPlayer) return;
    
    currentTrackIndex = index;
    const track = playlist[index];
    
    // Update audio source
    audioPlayer.src = track.url;
    
    // Update active state in playlist
    document.querySelectorAll('.mini-playlist-item').forEach((item, i) => {
        item.classList.toggle('active', i === index);
    });
    
    // Update current song title display
    const currentSongNameEl = document.getElementById('currentSongName');
    if (currentSongNameEl) {
        currentSongNameEl.textContent = track.title;
    }
    
    // Update buttons
    updateButtons();
    
    // Try to auto-play
    const playPromise = audioPlayer.play();
    
    if (playPromise !== undefined) {
        playPromise
            .then(() => {
                console.log('Auto-play started successfully');
            })
            .catch(error => {
                console.log('Auto-play blocked, user must click play:', error);
            });
    }
}

// Update button states
function updateButtons() {
    if (prevBtn) prevBtn.disabled = currentTrackIndex === 0;
    if (nextBtn) nextBtn.disabled = currentTrackIndex === playlist.length - 1;
    if (restartBtn) restartBtn.disabled = false;
}

// Event listeners
if (prevBtn) {
    prevBtn.addEventListener('click', () => {
        let prevIndex = currentTrackIndex - 1;
        
        // Find previous non-skipped song
        while (prevIndex >= 0 && skippedSongs.has(prevIndex)) {
            prevIndex--;
        }
        
        if (prevIndex >= 0) {
            loadTrack(prevIndex);
        }
    });
}

if (restartBtn) {
    restartBtn.addEventListener('click', () => {
        audioPlayer.currentTime = 0;
        audioPlayer.play().catch(e => console.log('Play prevented:', e));
    });
}

if (nextBtn) {
    nextBtn.addEventListener('click', () => {
        let nextIndex = currentTrackIndex + 1;
        
        // Find next non-skipped song
        while (nextIndex < playlist.length && skippedSongs.has(nextIndex)) {
            nextIndex++;
        }
        
        if (nextIndex < playlist.length) {
            loadTrack(nextIndex);
        }
    });
}

// Auto-advance to next track (skip over skipped songs)
if (audioPlayer) {
    audioPlayer.addEventListener('ended', () => {
        let nextIndex = currentTrackIndex + 1;
        
        // Find next non-skipped song
        while (nextIndex < playlist.length && skippedSongs.has(nextIndex)) {
            nextIndex++;
        }
        
        if (nextIndex < playlist.length) {
            loadTrack(nextIndex);
        }
    });
}

// Click on playlist item to play
function loadTrackFromElement(element) {
    const playlistItem = element.closest('.mini-playlist-item');
    if (playlistItem) {
        const index = parseInt(playlistItem.dataset.index);
        loadTrack(index);
    }
}

// Toggle skip song
async function toggleSkipSong(index) {
    const playlistItem = document.querySelector(`[data-index="${index}"]`);
    const skipBtn = playlistItem.querySelector('.skip-btn');
    const splitId = playlistItem.dataset.splitId;
    const isSkipped = skippedSongs.has(index);
    
    // Update UI immediately
    if (isSkipped) {
        // Un-skip
        skippedSongs.delete(index);
        playlistItem.style.opacity = '1';
        playlistItem.style.textDecoration = 'none';
        skipBtn.classList.remove('btn-danger');
        skipBtn.classList.add('btn-outline-secondary');
        skipBtn.innerHTML = '<i class="bi bi-skip-forward"></i>';
        skipBtn.title = 'Skip this song';
    } else {
        // Skip
        skippedSongs.add(index);
        playlistItem.style.opacity = '0.5';
        playlistItem.style.textDecoration = 'line-through';
        skipBtn.classList.remove('btn-outline-secondary');
        skipBtn.classList.add('btn-danger');
        skipBtn.innerHTML = '<i class="bi bi-x-circle"></i>';
        skipBtn.title = 'Un-skip this song';
        
        // If currently playing this song, skip to next
        if (currentTrackIndex === index) {
            let nextIndex = index + 1;
            while (nextIndex < playlist.length && skippedSongs.has(nextIndex)) {
                nextIndex++;
            }
            if (nextIndex < playlist.length) {
                loadTrack(nextIndex);
            }
        }
    }
    
    // Save to database
    try {
        await fetch(`/setlists/<%= setlist.id %>/recordings/splits/${splitId}/skip`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isSkipped: !isSkipped })
        });
    } catch (error) {
        console.error('Failed to save skip state:', error);
    }
}

// Promote split to song's global links
async function promoteSplitToSong(splitId, songId, songTitle) {
    if (!confirm(`Add this recording of "${songTitle}" to the song's links?\n\nThis will make it visible on the global song page.`)) {
        return;
    }
    
    const button = event.target.closest('.promote-btn');
    const originalHtml = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
    
    try {
        const response = await fetch(`/setlists/<%= setlist.id %>/recordings/splits/${splitId}/promote`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ songId })
        });
        
        if (response.ok) {
            // Replace button with success badge
            const badge = document.createElement('span');
            badge.className = 'badge bg-success ms-2';
            badge.title = 'Promoted to song';
            badge.innerHTML = '<i class="bi bi-rocket-takeoff-fill"></i>';
            button.parentNode.replaceChild(badge, button);
        } else {
            const error = await response.json();
            alert(error.error || 'Failed to add to song');
            button.disabled = false;
            button.innerHTML = originalHtml;
        }
    } catch (error) {
        console.error('Promote error:', error);
        alert('Failed to add to song. Please try again.');
        button.disabled = false;
        button.innerHTML = originalHtml;
    }
}
</script>

