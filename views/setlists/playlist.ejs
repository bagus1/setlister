<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="h5 mb-0"><%= setlist.title %></h2>
                <a href="/setlists/<%= setlist.id %>" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-arrow-left"></i> Back to Setlist
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-music-note-list"></i> Audio Playlist
                    </h5>
                </div>
                <div class="card-body">
                    <% if (audioSongs.length > 0) { %>
                        <div class="audio-player mb-4">
                            <audio id="audio" controls preload="auto" class="w-100">
                                <source src="<%= audioSongs[0].preferredAudioUrl %>" type="audio/mpeg">
                                Your browser does not support the audio element.
                            </audio>
                            <div class="player-controls mt-3">
                                <button id="prevBtn" class="control-btn" onclick="playPreviousSong()">
                                    <i class="bi bi-skip-backward bold-icon"></i>
                                </button>
                                <button id="restartBtn" class="control-btn" onclick="restartCurrentSong()">
                                    <i class="bi bi-arrow-repeat bold-icon"></i>
                                </button>
                                <button id="nextBtn" class="control-btn" onclick="playNextSong()">
                                    <i class="bi bi-skip-forward bold-icon"></i>
                                </button>
                            </div>
                        </div>
                        
                        <ul id="playlist" class="playlist">
                            <% 
                            let currentSet = null;
                            let setSongCount = 0;
                            %>
                            <% audioSongs.forEach((audioSong, index) => { %>
                                <% 
                                // Check if we're starting a new set
                                if (currentSet !== audioSong.set) {
                                    // Reset counters for new set
                                    currentSet = audioSong.set;
                                    setSongCount = 0;
                                }
                                setSongCount++;
                                %>
                                <li class="<%= index === 0 ? 'active' : '' %>" data-url="<%= audioSong.preferredAudioUrl %>">
                                    <a href="#" onclick="playSong(this.parentElement, event)">
                                        <div class="song-info">
                                            <div class="song-title">
                                                <strong><%= audioSong.song.title %></strong>
                                                <% if (audioSong.song.artists && audioSong.song.artists.length > 0) { %>
                                                    <span class="song-artist">• <%= audioSong.song.artists[0].artist.name %></span>
                                                <% } %>
                                                <% if (audioSong.song.key) { %>
                                                    <span class="song-key">• Key: <%= audioSong.song.key %></span>
                                                <% } %>
                                                <% if (audioSong.duration) { %>
                                                    <% 
                                                    const minutes = Math.floor(audioSong.duration / 60);
                                                    const seconds = audioSong.duration % 60;
                                                    const formattedDuration = seconds < 10 ? `${minutes}:0${seconds}` : `${minutes}:${seconds}`;
                                                    %>
                                                    <span class="song-duration">• <%= formattedDuration %></span>
                                                <% } %>
                                            </div>
                                        </div>
                                    </a>
                                </li>
                            <% }); %>
                        </ul>
                    <% } else { %>
                        <div class="no-audio text-center py-5">
                            <h3>No Audio Files Found</h3>
                            <p class="text-muted">This setlist doesn't contain any songs with audio links.</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-calculator"></i> Set Summaries
                    </h5>
                </div>
                <div class="card-body">
                    <% if (audioSongs.length > 0) { %>
                        <% 
                        let currentSet = null;
                        let setSongCount = 0;
                        %>
                        <% audioSongs.forEach((audioSong, index) => { %>
                            <% 
                            // Skip Maybe sets in the main iteration - they'll be handled separately
                            if (audioSong.set === 'Maybe') {
                                return;
                            }
                            
                            // Check if we're starting a new set
                            if (currentSet !== audioSong.set) {
                                // Print summary for previous set if it exists
                                if (currentSet && setSongCount > 0) { %>
                                    <div class="set-summary-card mb-3">
                                        <div class="set-summary-header">
                                            <strong><%= currentSet %></strong>
                                        </div>
                                        <div class="set-summary-stats">
                                            <span class="song-count"><%= setSongCount %> songs</span>
                                            <% if (setTotals[currentSet]) { %>
                                                <% 
                                                const seconds = setTotals[currentSet];
                                                const hours = Math.floor(seconds / 3600);
                                                const minutes = Math.floor((seconds % 3600) / 60);
                                                const secs = seconds % 60;
                                                const timeString = hours > 0 ? 
                                                    `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}` :
                                                    `${minutes}:${secs.toString().padStart(2, '0')}`;
                                                %>
                                                <span class="set-time"><%= timeString %></span>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } %>
                                <% 
                                // Reset counters for new set
                                currentSet = audioSong.set;
                                setSongCount = 0;
                            }
                            setSongCount++;
                            %>
                        <% }); %>
                        
                        <% 
                        // Print summary for the last set
                        if (currentSet && setSongCount > 0) { %>
                            <div class="set-summary-card mb-3">
                                <div class="set-summary-header">
                                    <strong><%= currentSet %></strong>
                                </div>
                                <div class="set-summary-stats">
                                    <span class="song-count"><%= setSongCount %> songs</span>
                                    <% if (setTotals[currentSet]) { %>
                                        <% 
                                        const seconds = setTotals[currentSet];
                                        const hours = Math.floor(seconds / 3600);
                                        const minutes = Math.floor((seconds % 3600) / 60);
                                        const secs = seconds % 60;
                                        const timeString = hours > 0 ? 
                                            `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}` :
                                            `${minutes}:${secs.toString().padStart(2, '0')}`;
                                        %>
                                        <span class="set-time"><%= timeString %></span>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                        
                        <hr class="my-4">
                        
                        <div class="total-summary-card">
                            <div class="total-summary-header">
                                <strong>Total (Excluding Maybe)</strong>
                            </div>
                            <div class="total-summary-stats">
                                <% 
                                const numberedSongCount = audioSongs.filter(song => song.set !== 'Maybe').length;
                                const numberedSetTime = audioSongs
                                    .filter(song => song.set !== 'Maybe')
                                    .reduce((total, song) => total + (song.duration || 0), 0);
                                %>
                                <span class="song-count"><%= numberedSongCount %> songs</span>
                                <% if (numberedSetTime > 0) { %>
                                    <% 
                                    const seconds = numberedSetTime;
                                    const hours = Math.floor(seconds / 3600);
                                    const minutes = Math.floor((seconds % 3600) / 60);
                                    const secs = seconds % 60;
                                    const timeString = hours > 0 ? 
                                        `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}` :
                                        `${minutes}:${secs.toString().padStart(2, '0')}`;
                                    %>
                                    <span class="total-time"><%= timeString %></span>
                                <% } %>
                            </div>
                        </div>
                        
                        <% if (maybeTime > 0) { %>
                            <div class="maybe-summary-card mt-3">
                                <div class="maybe-summary-header">
                                    <strong>Maybe Set</strong>
                                </div>
                                <div class="maybe-summary-stats">
                                    <% 
                                    const maybeSongCount = audioSongs.filter(song => song.set === 'Maybe').length;
                                    %>
                                    <span class="song-count"><%= maybeSongCount %> songs</span>
                                    <% 
                                    const seconds = maybeTime;
                                    const hours = Math.floor(seconds / 3600);
                                    const minutes = Math.floor((seconds % 3600) / 60);
                                    const secs = seconds % 60;
                                    const timeString = hours > 0 ? 
                                        `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}` :
                                        `${minutes}:${secs.toString().padStart(2, '0')}`;
                                    %>
                                    <span class="maybe-time"><%= timeString %></span>
                                </div>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="text-center py-4">
                            <i class="bi bi-info-circle text-muted info-icon-large"></i>
                            <p class="text-muted mt-2">No audio files to summarize</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    let currentSong = 0;
    const audio = document.getElementById('audio');
    const playlist = document.getElementById('playlist');
    const tracks = playlist ? playlist.querySelectorAll('li') : [];

    if (audio && tracks.length > 0) {
        // Set initial volume
        audio.volume = 0.5;

        // Auto-play the first song when page loads
        const firstTrack = tracks[0];
        if (firstTrack) {
            const songUrl = firstTrack.dataset.url;
            if (songUrl) {
                audio.src = songUrl;
                audio.load();
                
                // Try to auto-play with fallback handling
                const playPromise = audio.play();
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log('Auto-play started successfully');
                        })
                        .catch(error => {
                            console.log('Auto-play blocked, user must click play:', error);
                            // Show a subtle hint that user needs to click play
                            const playButton = audio.querySelector('button[title="Play"]') || 
                                             audio.querySelector('.play-button');
                            if (playButton) {
                                playButton.style.animation = 'pulse 2s infinite';
                            }
                        });
                }
            }
        }

        // Auto-play next song when current one ends
        audio.addEventListener('ended', function() {
            currentSong++;
            if (currentSong >= tracks.length) {
                currentSong = 0; // Loop back to first song
            }
            playSong(tracks[currentSong]);
        });
    }

    function playSong(songElement, event) {
        if (event) {
            event.preventDefault();
        }
        
        if (!songElement || !audio) return;

        // Update active state
        document.querySelectorAll('#playlist li').forEach(li => li.classList.remove('active'));
        songElement.classList.add('active');

        // Get song URL and play
        const songUrl = songElement.dataset.url;
        if (songUrl) {
            audio.src = songUrl;
            audio.load();
            audio.play();
            
            // Update current song index
            currentSong = Array.from(tracks).indexOf(songElement);
        }
    }
    
    function restartCurrentSong() {
        if (audio) {
            audio.currentTime = 0;
            audio.play();
        }
    }
    
    function playNextSong() {
        if (tracks.length === 0) return;
        
        currentSong++;
        if (currentSong >= tracks.length) {
            currentSong = 0; // Loop back to first song
        }
        playSong(tracks[currentSong]);
    }
    
    function playPreviousSong() {
        if (tracks.length === 0) return;
        
        currentSong--;
        if (currentSong < 0) {
            currentSong = tracks.length - 1; // Loop to last song
        }
        playSong(tracks[currentSong]);
    }
</script>
