<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1><i class="bi bi-play-circle"></i> Recording</h1>
                    <h2 class="h4 text-muted">
                        <%= setlist.title %> - <%= setlist.band.name %>
                    </h2>
                    <p class="small text-muted mb-0">
                        <i class="bi bi-calendar"></i> 
                        <%= new Date(recording.createdAt).toLocaleString('en-US', { 
                            weekday: 'long',
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric',
                            hour: 'numeric',
                            minute: '2-digit'
                        }) %>
                        • <i class="bi bi-person"></i> <%= recording.creator.username %>
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>" 
                       class="btn btn-outline-secondary">
                        <i class="bi bi-music-note-list"></i> Back to Setlist
                    </a>
                    <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings" 
                       class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Recordings
                    </a>
                    <a href="/bands/<%= setlist.band.id %>" 
                       class="btn btn-outline-secondary">
                        <i class="bi bi-people"></i> Back to Band
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-9">
            <% if (recording.isProcessed && recording.splits.length > 0 && recording.splits.some(s => s.filePath)) { %>
                <!-- Main Player for Split Songs -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-play-circle"></i> Audio Player
                        </h5>
                        <div class="mt-2">
                            <span class="badge bg-info">
                                <i class="bi bi-music-note-list"></i> <%= recording.splits.filter(s => s.filePath).length %> songs
                            </span>
                        </div>
                    </div>
                    <div class="card-body text-center">
                        <audio id="audioPlayer" controls class="w-100">
                            <source src="" type="audio/mpeg">
                            Your browser does not support the audio element.
                        </audio>
                        
                        <div class="mt-3">
                            <button id="prevBtn" class="btn btn-outline-primary me-2" disabled>
                                <i class="bi bi-skip-backward-fill"></i> Previous
                            </button>
                            <button id="restartBtn" class="btn btn-outline-warning me-2" disabled>
                                <i class="bi bi-arrow-repeat"></i> Restart
                            </button>
                            <button id="nextBtn" class="btn btn-outline-primary" disabled>
                                <i class="bi bi-skip-forward-fill"></i> Next
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Playlist -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-music-note-list"></i> Playlist
                        </h5>
                    </div>
                    <div class="card-body">
                        <ul id="playlist" class="list-group list-group-flush">
                            <% recording.splits.forEach((split, index) => { %>
                                <% if (split.filePath) { %>
                                    <li class="list-group-item playlist-item" 
                                        data-index="<%= index %>" 
                                        data-url="<%= split.filePath %>"
                                        data-title="<%= split.song.title %>"
                                        style="cursor: pointer;">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <span class="badge bg-light text-dark me-3">
                                                    <%= index + 1 %>
                                                </span>
                                                <div>
                                                    <strong class="song-title"><%= split.song.title %></strong>
                                                    <br><small class="text-muted">
                                                        Duration: <%= Math.floor(split.duration / 60) %>:<%= Math.floor(split.duration % 60).toString().padStart(2, '0') %>
                                                    </small>
                                                </div>
                                            </div>
                                            <div class="d-flex gap-1">
                                                <% if (split.linkId) { %>
                                                    <span class="badge bg-success" title="Promoted to song">
                                                        <i class="bi bi-rocket-takeoff-fill"></i>
                                                    </span>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-outline-warning promote-btn" 
                                                            data-split-id="<%= split.id %>"
                                                            data-song-id="<%= split.songId %>"
                                                            data-song-title="<%= split.song.title %>"
                                                            title="Add as Link to Song"
                                                            onclick="event.stopPropagation(); promoteSplitToSong(<%= split.id %>, <%= split.songId %>, '<%= split.song.title.replace(/'/g, "\\'") %>')">
                                                        <i class="bi bi-rocket-takeoff"></i>
                                                    </button>
                                                <% } %>
                                                <a href="<%= split.filePath %>" 
                                                   class="btn btn-sm btn-outline-success" 
                                                   download
                                                   onclick="event.stopPropagation();">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                                <button class="btn btn-sm btn-outline-danger delete-split-btn" 
                                                        data-split-id="<%= split.id %>"
                                                        data-song-title="<%= split.song.title %>"
                                                        title="<%= split.filePath === recording.filePath ? 'Cannot delete - shares file with source. Use Delete Everything instead.' : 'Delete this split recording' %>"
                                                        <% if (split.filePath === recording.filePath) { %>disabled<% } %>
                                                        onclick="event.stopPropagation(); deleteSplit(<%= split.id %>, '<%= split.filePath ? split.filePath.split('/').pop() : 'Unknown file' %>', '<%= split.song.title.replace(/'/g, "\\'") %>', <%= split.linkId || 'null' %>)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </li>
                                <% } %>
                            <% }) %>
                        </ul>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-end gap-2">
                            <button class="btn btn-danger btn-sm" onclick="deleteAllAndResplit()">
                                <i class="bi bi-arrow-clockwise"></i> Delete All and Re-Split
                            </button>
                            <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/split" 
                               class="btn btn-outline-secondary btn-sm">
                                <i class="bi bi-plus-circle"></i> Add More Splits
                            </a>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <!-- Show full recording if not split yet -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-play-circle"></i> Recording
                        </h5>
                    </div>
                    <div class="card-body">
                        <audio controls style="width: 100%; margin-bottom: 2rem;">
                            <source src="<%= recording.filePath %>" type="audio/webm">
                            <source src="<%= recording.filePath %>" type="audio/mp3">
                            Your browser does not support the audio element.
                        </audio>
                        
                        <div class="text-center mb-3">
                            <h5 class="mb-3">What did you record?</h5>
                            <p class="text-muted">Choose how to process this recording</p>
                        </div>

                        <div class="row g-3">
                            <!-- Single Song Option -->
                            <div class="col-md-6">
                                <div class="card h-100 border-primary">
                                    <div class="card-body text-center d-flex flex-column">
                                        <i class="bi bi-music-note-beamed text-primary mb-3" style="font-size: 3rem;"></i>
                                        <h5 class="card-title">Single Song</h5>
                                        <p class="card-text flex-grow-1">
                                            This recording is one complete song
                                        </p>
                                        <button class="btn btn-primary btn-lg w-100" onclick="showAssignSongModal()">
                                            <i class="bi bi-music-note"></i> Assign to Song
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Multiple Songs Option -->
                            <div class="col-md-6">
                                <div class="card h-100 border-info">
                                    <div class="card-body text-center d-flex flex-column">
                                        <i class="bi bi-music-note-list text-info mb-3" style="font-size: 3rem;"></i>
                                        <h5 class="card-title">Full Set / Rehearsal</h5>
                                        <p class="card-text flex-grow-1">
                                            Trim or split the recording into multiple songs
                                        </p>
                                        <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/split" 
                                           class="btn btn-info btn-lg w-100 mb-2">
                                            <i class="bi bi-scissors"></i> Split Recording
                                        </a>
                                        <a href="/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/split-web-audio" 
                                           class="btn btn-outline-secondary btn-sm w-100">
                                            <i class="bi bi-waveform"></i> Web Audio Waveform
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <% } %>
        </div>

        <!-- Sidebar -->
        <div class="col-md-3">
            <% if (recording.isProcessed && recording.splits.length > 0) { %>
                <!-- Source Recording Player in Sidebar -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-music-note-beamed"></i> Source Recording
                        </h6>
                    </div>
                    <div class="card-body">
                        <% if (recording.filePath && recording.filePath.trim() !== "") { %>
                            <audio controls style="width: 100%;">
                                <source src="<%= recording.filePath %>" type="audio/webm">
                                <source src="<%= recording.filePath %>" type="audio/mp3">
                                Your browser does not support the audio element.
                            </audio>
                            <div class="text-center mt-2 mb-3">
                                <small class="text-muted">
                                    <%= Math.floor(recording.duration / 60) %>:<%= (recording.duration % 60).toString().padStart(2, '0') %>
                                </small>
                            </div>
                            <div class="d-grid gap-2">
                                <a href="<%= recording.filePath %>" 
                                   download 
                                   class="btn btn-outline-success btn-sm">
                                    <i class="bi bi-download"></i> Download Source
                                </a>
                                <button class="btn btn-outline-danger btn-sm" 
                                        <% if (recording.splits.some(s => s.filePath === recording.filePath)) { %>disabled<% } %>
                                        onclick="deleteSourceRecording()" 
                                        title="<%= recording.splits.some(s => s.filePath === recording.filePath) ? 'Cannot delete - shares file with split songs. Use Delete Everything instead.' : 'Save space by deleting the source if you\'ve already split it' %>">
                                    <i class="bi bi-trash"></i> Delete Source
                                </button>
                                <button class="btn btn-danger btn-sm" 
                                        onclick="deleteEntireRecording()" 
                                        title="Permanently delete this recording and all split files">
                                    <i class="bi bi-exclamation-triangle-fill"></i> Delete Everything
                                </button>
                            </div>
                            <% if (recording.splits.some(s => s.filePath === recording.filePath)) { %>
                                <div class="alert alert-warning mt-3 mb-0" style="padding: 0.25rem 0.5rem;">
                                    <small>
                                        <i class="bi bi-info-circle"></i> Shares file with split songs above
                                    </small>
                                </div>
                            <% } %>
                        <% } else { %>
                            <div class="text-center py-4">
                                <i class="bi bi-trash text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2 mb-0">
                                    Source file has been deleted to save space
                                </p>
                                <small class="text-muted">
                                    Individual songs above are still available
                                </small>
                            </div>
                            <div class="d-grid gap-2 mt-3">
                                <button class="btn btn-danger btn-sm" 
                                        onclick="deleteEntireRecording()" 
                                        title="Permanently delete this recording and all split files">
                                    <i class="bi bi-exclamation-triangle-fill"></i> Delete Everything
                                </button>
                            </div>
                        <% } %>
                    </div>
                </div>
            <% } %>

            <!-- Recording Info -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="bi bi-info-circle"></i> Recording Info
                    </h6>
                </div>
                <div class="card-body">
                    <p><strong>Setlist:</strong> <%= setlist.title %></p>
                    <% if (setlist.date) { %>
                        <p><strong>Gig Date:</strong> <%= new Date(setlist.date).toLocaleDateString() %></p>
                    <% } %>
                    <% 
                    // Extract filename and format from filePath
                    const filename = recording.filePath.split('/').pop() || 'Unknown';
                    const format = filename.split('.').pop() || recording.format || 'webm';
                    %>
                    <p><strong>Filename:</strong> <span class="text-muted"><%= filename %></span></p>
                    <p><strong>Format:</strong> <span class="badge bg-secondary"><%= format.toUpperCase() %></span></p>
                    <p><strong>Recorded by:</strong> <%= recording.creator.username %></p>
                    <p><strong>Recorded at:</strong> <%= new Date(recording.createdAt).toLocaleString() %></p>
                    <p>
                        <strong>Status:</strong> 
                        <% if (recording.isProcessed) { %>
                            <span class="badge bg-success">Processed</span>
                        <% } else { %>
                            <span class="badge bg-warning">Not Split</span>
                        <% } %>
                    </p>
                    <% if (recording.splits.length > 0) { %>
                        <p><strong>Songs extracted:</strong> <%= recording.splits.length %></p>
                    <% } %>
                    <% if (recording.fileSize) { %>
                        <p><strong>File Size:</strong> <%= (Number(recording.fileSize) / (1024 * 1024)).toFixed(1) %> MB</p>
                    <% } %>
                </div>
            </div>
            
            <% if (!recording.isProcessed || recording.splits.length === 0) { %>
                <!-- Delete Recording Button -->
                <div class="card mt-3">
                    <div class="card-body">
                        <button class="btn btn-danger w-100" 
                                onclick="deleteEntireRecording()" 
                                title="Permanently delete this recording">
                            <i class="bi bi-exclamation-triangle-fill"></i> Delete Recording
                        </button>
                    </div>
                </div>
            <% } %>
        </div>
    </div>
</div>

<style>
.playlist-item {
    transition: background 0.2s, color 0.2s;
}

.playlist-item:hover {
    background: #343a40 !important;
    color: white !important;
}

.playlist-item:hover .song-title,
.playlist-item:hover .text-muted {
    color: white !important;
}

.playlist-item:hover .badge {
    background: #495057 !important;
    color: white !important;
}

.playlist-item.active {
    background: #212529 !important;
    color: white !important;
    border-left: 4px solid #0d6efd;
}

.playlist-item.active .song-title,
.playlist-item.active .text-muted {
    color: white !important;
}

.playlist-item.active .badge {
    background: #495057 !important;
    color: white !important;
}
</style>

<script>
let currentTrackIndex = 0;
let playlist = [];
const audioPlayer = document.getElementById('audioPlayer');
const prevBtn = document.getElementById('prevBtn');
const restartBtn = document.getElementById('restartBtn');
const nextBtn = document.getElementById('nextBtn');

// Initialize playlist from DOM
document.addEventListener('DOMContentLoaded', function() {
    const playlistItems = document.querySelectorAll('.playlist-item');
    playlist = Array.from(playlistItems).map(item => ({
        url: item.dataset.url,
        title: item.dataset.title
    }));
    
    if (playlist.length > 0) {
        updateButtons();
        loadTrack(0);
    }
});

// Load and play a track
function loadTrack(index) {
    if (index < 0 || index >= playlist.length) return;
    
    currentTrackIndex = index;
    const track = playlist[index];
    
    // Update audio source
    audioPlayer.src = track.url;
    
    // Update active state in playlist
    document.querySelectorAll('.playlist-item').forEach((item, i) => {
        item.classList.toggle('active', i === index);
    });
    
    // Update buttons
    updateButtons();
    
    // Try to auto-play
    const playPromise = audioPlayer.play();
    
    if (playPromise !== undefined) {
        playPromise
            .then(() => {
                console.log('Auto-play started successfully');
            })
            .catch(error => {
                console.log('Auto-play blocked, user must click play:', error);
            });
    }
}

// Update button states
function updateButtons() {
    if (prevBtn) prevBtn.disabled = currentTrackIndex === 0;
    if (nextBtn) nextBtn.disabled = currentTrackIndex === playlist.length - 1;
    if (restartBtn) restartBtn.disabled = false;
}

// Event listeners
if (prevBtn) {
    prevBtn.addEventListener('click', () => {
        if (currentTrackIndex > 0) {
            loadTrack(currentTrackIndex - 1);
        }
    });
}

if (restartBtn) {
    restartBtn.addEventListener('click', () => {
        audioPlayer.currentTime = 0;
        audioPlayer.play().catch(e => console.log('Play prevented:', e));
    });
}

if (nextBtn) {
    nextBtn.addEventListener('click', () => {
        if (currentTrackIndex < playlist.length - 1) {
            loadTrack(currentTrackIndex + 1);
        }
    });
}

// Auto-advance to next track
if (audioPlayer) {
    audioPlayer.addEventListener('ended', () => {
        if (currentTrackIndex < playlist.length - 1) {
            loadTrack(currentTrackIndex + 1);
        }
    });
}

// Click on playlist item to play
document.addEventListener('click', (e) => {
    const playlistItem = e.target.closest('.playlist-item');
    if (playlistItem && !e.target.closest('a')) {
        const index = parseInt(playlistItem.dataset.index);
        loadTrack(index);
    }
});

// Assign recording to single song
function showAssignSongModal() {
    // Get songs from setlist
    fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>')
        .then(response => response.json())
        .catch(error => {
            console.error('Error loading songs:', error);
            // Fallback: show a simple prompt
            const songTitle = prompt('Enter the song title for this recording:');
            if (songTitle) {
                assignRecordingToSong(songTitle, null);
            }
        });
}

async function assignRecordingToSong(songTitle, songId) {
    try {
        console.log('Calling assign-song:', { songTitle, songId });
        
        const response = await fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/assign-song', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                songTitle: songTitle,
                songId: songId 
            })
        });

        console.log('Response status:', response.status);

        if (response.ok) {
            const result = await response.json();
            console.log('Assign successful:', result);
            // Reload page to show the processed recording
            window.location.reload();
        } else {
            const error = await response.json();
            console.error('Assign failed:', error);
            alert(error.error || 'Failed to assign recording to song');
        }
    } catch (error) {
        console.error('Assign error:', error);
        alert('Failed to assign recording. Please try again: ' + error.message);
    }
}
</script>

<!-- Assign Song Modal -->
<div class="modal fade" id="assignSongModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-music-note"></i> Assign to Song
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">Select a song from your setlist or create a new one:</p>
                
                <!-- Song Search/Select -->
                <div class="mb-3">
                    <label for="songSelect" class="form-label">Select Song</label>
                    <select class="form-select" id="songSelect">
                        <option value="">Loading songs...</option>
                    </select>
                </div>

                <!-- Or New Song -->
                <div class="text-center mb-2">
                    <small class="text-muted">— OR —</small>
                </div>

                <div class="mb-3">
                    <label for="newSongTitle" class="form-label">Create New Song</label>
                    <input type="text" class="form-control" id="newSongTitle" 
                           placeholder="Enter song title...">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="confirmAssignSong()">
                    <i class="bi bi-check-circle"></i> Assign Recording
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Load songs and show modal
function showAssignSongModal() {
    const modal = new bootstrap.Modal(document.getElementById('assignSongModal'));
    const songSelect = document.getElementById('songSelect');
    
    // Load songs from setlist
    fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/api/songs')
        .then(response => response.json())
        .then(data => {
            songSelect.innerHTML = '<option value="">— Choose a song —</option>';
            if (data.songs && data.songs.length > 0) {
                data.songs.forEach(song => {
                    const option = document.createElement('option');
                    option.value = song.id;
                    option.textContent = song.title;
                    songSelect.appendChild(option);
                });
            } else {
                songSelect.innerHTML = '<option value="">No songs in setlist</option>';
            }
        })
        .catch(error => {
            console.error('Error loading songs:', error);
            songSelect.innerHTML = '<option value="">Error loading songs</option>';
        });
    
    modal.show();
}

// Confirm and assign
async function confirmAssignSong() {
    const songSelect = document.getElementById('songSelect');
    const newSongTitle = document.getElementById('newSongTitle');
    
    let songId = songSelect.value;
    let songTitle = newSongTitle.value.trim();
    
    if (!songId && !songTitle) {
        alert('Please select a song or enter a new song title');
        return;
    }
    
    // If creating new song, use title
    if (songTitle) {
        songId = null;
    } else {
        // Get selected song title
        songTitle = songSelect.options[songSelect.selectedIndex].text;
    }
    
    // Close modal
    bootstrap.Modal.getInstance(document.getElementById('assignSongModal')).hide();
    
    // Assign the recording
    await assignRecordingToSong(songTitle, songId);
}

// Delete source recording file only (keep splits)
async function deleteSourceRecording() {
    const hasLinks = <%= JSON.stringify(recording.splits.some(s => s.linkId)) %>;
    const splitCount = <%= recording.splits.length %>;
    
    let message = `Delete the source recording file to save space?\n\n`;
    message += `This will remove ${Math.round((Number(<%= recording.fileSize || 0 %>) / (1024 * 1024)) * 10) / 10} MB from your storage quota.\n\n`;
    message += `${splitCount} individual song(s) will still work, but the full recording player will stop working.`;
    
    if (hasLinks) {
        message += `\n\n⚠️ Some songs are linked to top-level song pages. They will be removed from those pages.`;
    }
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const response = await fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/delete-source', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            window.location.reload();
        } else {
            const error = await response.json();
            alert('Error: ' + (error.error || 'Failed to delete source file'));
        }
    } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete source file: ' + error.message);
    }
}

// Delete entire recording and all splits
async function deleteAllAndResplit() {
    const splitCount = <%= recording.splits.length %>;
    
    let message = `Delete all ${splitCount} split(s) and start over?\n\n`;
    message += `This will DELETE:\n`;
    message += `• All split files\n`;
    message += `• Links to these files on song pages\n`;
    message += `• All split records\n\n`;
    message += `The source recording will remain.\n\n`;
    message += `This cannot be undone!`;
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const response = await fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/delete-all-splits', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            // Redirect to split page
            window.location.href = '/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>/split';
        } else {
            alert('Failed to delete splits: ' + (result.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Delete all splits error:', error);
        alert('Failed to delete splits');
    }
}

async function deleteEntireRecording() {
    const hasLinks = <%= JSON.stringify(recording.splits.some(s => s.linkId)) %>;
    const splitCount = <%= recording.splits.length %>;
    
    let message = `⚠️ PERMANENTLY delete this recording?\n\n`;
    message += `This will DELETE:\n`;
    message += `• The full recording file\n`;
    message += `• All ${splitCount} split recording(s)\n`;
    message += `• All associated data\n\n`;
    message += `This cannot be undone!`;
    
    if (hasLinks) {
        message += `\n\n⚠️ Some songs are linked to top-level song pages. They will be removed from those pages.`;
    }
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const response = await fetch('/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings/<%= recording.id %>', {
            method: 'DELETE'
        });
        
        // Parse JSON response
        const result = await response.json();
        
        if (response.ok && result.success) {
            // Show success message and redirect
            alert(result.message || 'Recording deleted successfully');
            window.location.href = '/bands/<%= setlist.band.id %>/setlists/<%= setlist.id %>/recordings';
        } else {
            alert('Error: ' + (result.error || 'Failed to delete recording'));
        }
    } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete recording: ' + error.message);
    }
}

// Promote split to song's global links
async function promoteSplitToSong(splitId, songId, songTitle) {
    if (!confirm(`Add this recording of "${songTitle}" to the song's links?\n\nThis will make it visible on the global song page.`)) {
        return;
    }
    
    const button = event.target.closest('.promote-btn');
    const originalHtml = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
    
    try {
        console.log('Promoting split:', { splitId, songId, songTitle });
        const response = await fetch(`/setlists/<%= setlist.id %>/recordings/splits/${splitId}/promote`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ songId })
        });
        
        console.log('Response status:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('Promote successful:', result);
            // Replace button with success badge
            const badge = document.createElement('span');
            badge.className = 'badge bg-success';
            badge.title = 'Promoted to song';
            badge.innerHTML = '<i class="bi bi-rocket-takeoff-fill"></i>';
            button.parentNode.replaceChild(badge, button);
        } else {
            const error = await response.json();
            console.error('Promote failed:', error);
            alert(error.error || 'Failed to add to song');
            button.disabled = false;
            button.innerHTML = originalHtml;
        }
    } catch (error) {
        console.error('Promote error:', error);
        alert('Failed to add to song. Please try again: ' + error.message);
        button.disabled = false;
        button.innerHTML = originalHtml;
    }
}

// Delete a split recording
async function deleteSplit(splitId, fileName, songTitle, linkId) {
    let message = `⚠️ Delete this recording split?\n\n`;
    message += `This will DELETE:\n`;
    message += `• The audio file "${fileName}"\n`;
    
    if (linkId) {
        message += `• The link to it on the main song page\n`;
    }
    message += `\n⚠️ This may also affect:\n`;
    message += `• Any album tracks that reference this file\n`;
    message += `• Any band song records that reference this file\n`;
    message += `\nThis cannot be undone!`;
    
    if (!confirm(message)) {
        return;
    }
    
    try {
        const response = await fetch(`/setlists/<%= setlist.id %>/recordings/splits/${splitId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const result = await response.json();
        
        if (response.ok) {
            if (result.warning) {
                alert('⚠️ ' + result.warning + '\n\nDeletion completed, but the file was referenced in other records.');
            }
            // Reload the page to refresh the list
            window.location.reload();
        } else {
            alert('Error: ' + (result.error || 'Failed to delete split'));
        }
    } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete split: ' + error.message);
    }
}
</script>
