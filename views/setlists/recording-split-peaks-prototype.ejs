<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Peaks.js Recording Split - Prototype</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css"
      rel="stylesheet"
    />
  </head>
  <body class="bg-light">
    <div class="container-fluid py-4">
      <div class="row">
        <div class="col-12">
          <h2 class="mb-4">Peaks.js Recording Split Prototype</h2>

          <!-- Audio Controls -->
          <div class="card mb-4">
            <div class="card-header">
              <h5><i class="bi bi-music-note"></i> Audio Controls</h5>
            </div>
            <div class="card-body">
              <div class="d-flex align-items-center gap-3">
                <button id="playPauseBtn" class="btn btn-primary">
                  <i class="bi bi-play-fill"></i> Play
                </button>
                <button id="stopBtn" class="btn btn-outline-danger">
                  <i class="bi bi-stop-fill"></i> Stop
                </button>
                <div class="mx-3" style="width: 180px; text-align: center">
                  <span id="currentTime">0:00</span> /
                  <span id="totalTime">0:00</span>
                </div>
                <div class="d-flex align-items-center gap-2">
                  <label for="zoom" class="mb-0">Zoom:</label>
                  <input
                    type="range"
                    id="zoom"
                    min="1"
                    max="100"
                    value="1"
                    class="form-range"
                    style="width: 150px"
                  />
                  <button
                    id="resetZoomBtn"
                    class="btn btn-sm btn-outline-secondary"
                  >
                    <i class="bi bi-arrow-clockwise"></i> Reset
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Waveform Container -->
          <div class="card mb-4">
            <div class="card-header">
              <h5><i class="bi bi-graph-up"></i> Waveform Editor</h5>
            </div>
            <div class="card-body">
              <!-- Overview Waveform -->
              <div class="mb-3">
                <h6>Overview</h6>
                <div
                  id="overview-container"
                  style="
                    height: 100px;
                    border: 1px solid #dee2e6;
                    border-radius: 4px;
                    background: #f8f9fa;
                  "
                ></div>
              </div>

              <!-- Zoomed Waveform -->
              <div>
                <h6>Zoomed View</h6>
                <div
                  id="zoomview-container"
                  style="
                    height: 200px;
                    border: 2px solid #dee2e6;
                    border-radius: 8px;
                    background: #f8f9fa;
                  "
                ></div>
              </div>

              <!-- Instructions -->
              <div class="mt-3 alert alert-info">
                <strong><i class="bi bi-info-circle"></i> Instructions:</strong>
                <ul class="mb-0 mt-2">
                  <li>Drag on the waveform to create segments</li>
                  <li>Use zoom controls to focus on specific areas</li>
                  <li>Click segments to select them</li>
                  <li>Assign songs to segments using the panel below</li>
                </ul>
              </div>
            </div>
          </div>

          <!-- Song Assignment Panel -->
          <div class="card">
            <div class="card-header">
              <h5><i class="bi bi-list-music"></i> Song Assignment</h5>
            </div>
            <div class="card-body">
              <div id="segmentsList" class="mb-3">
                <p class="text-muted">
                  No segments created yet. Drag on the waveform to create
                  segments.
                </p>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <h6>Available Songs:</h6>
                  <div id="songsList" class="list-group">
                    <!-- Songs will be populated here -->
                  </div>
                </div>
                <div class="col-md-6">
                  <h6>Selected Segment:</h6>
                  <div id="selectedSegmentInfo" class="alert alert-light">
                    <p class="mb-0 text-muted">No segment selected</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Audio Element (hidden) -->
    <audio id="audio" preload="metadata" style="display: none">
      <!-- Audio source will be set dynamically -->
    </audio>

    <!-- Dependencies - Local files -->
    <script src="/js/konva.min.js"></script>
    <script src="/js/waveform-data.min.js"></script>
    <script src="/js/peaks.min.js"></script>

    <script>
      // Basic test to see if JavaScript is executing at all
      console.log("=== PEAKS.JS PROTOTYPE STARTING ===");
      console.log("Script tag executed at:", new Date().toISOString());

      // Peaks.js Implementation
      let peaks = null;
      let selectedSegment = null;
      const segmentSongMap = {};

      // Mock data for demo
      const mockSongs = [
        { id: 1, title: "Song 1", artist: "Artist 1" },
        { id: 2, title: "Song 2", artist: "Artist 2" },
        { id: 3, title: "Song 3", artist: "Artist 3" },
      ];

      // Real songs from your setlist (using mock data for now to avoid EJS issues)
      const realSongs = [
        { id: 1, title: "Song 1", artist: "Artist 1" },
        { id: 2, title: "Song 2", artist: "Artist 2" },
        { id: 3, title: "Song 3", artist: "Artist 3" },
      ];

      // Initialize Peaks.js
      async function initPeaks() {
        try {
          // Check if Peaks.js is available (check both cases)
          const PeaksLib = window.peaks || window.Peaks;
          if (typeof PeaksLib === "undefined") {
            throw new Error(
              "Peaks.js library not loaded. Please check your internet connection."
            );
          }

          const audioElement = document.getElementById("audio");
          const overviewContainer =
            document.getElementById("overview-container");
          const zoomviewContainer =
            document.getElementById("zoomview-container");

          // Verify all required DOM elements exist and are valid
          if (!audioElement) {
            throw new Error("Audio element not found");
          }
          if (!overviewContainer) {
            throw new Error("Overview container not found");
          }
          if (!zoomviewContainer) {
            throw new Error("Zoomview container not found");
          }

          // Additional validation - check if elements are actually HTML elements
          console.log(
            "Audio element:",
            audioElement,
            "Type:",
            typeof audioElement
          );
          console.log(
            "Overview container:",
            overviewContainer,
            "Type:",
            typeof overviewContainer
          );
          console.log(
            "Zoomview container:",
            zoomviewContainer,
            "Type:",
            typeof zoomviewContainer
          );

          if (!(overviewContainer instanceof HTMLElement)) {
            throw new Error("Overview container is not a valid HTML element");
          }
          if (!(zoomviewContainer instanceof HTMLElement)) {
            throw new Error("Zoomview container is not a valid HTML element");
          }

          console.log(
            "All DOM elements found and validated, proceeding with Peaks.js initialization"
          );

          console.log(
            "Initializing Peaks.js with audio file:",
            audioElement.src
          );
          console.log("Audio element readyState:", audioElement.readyState);
          console.log("Audio element duration:", audioElement.duration);

          // Create audio context for Peaks.js (required for waveform generation)
          const audioContext = new (window.AudioContext ||
            window.webkitAudioContext)();

          console.log("Audio context created:", audioContext);

          // Peaks.js uses callback-based initialization, not promises
          PeaksLib.init(
            {
              containers: {
                overview: overviewContainer,
                zoomview: zoomviewContainer,
              },
              mediaElement: audioElement,
              webAudio: {
                audioContext: audioContext, // Required for waveform generation
              },
              overview: {
                waveformColor: "#6f42c1",
                playedWaveformColor: "#6f42c1",
              },
              zoomview: {
                waveformColor: "#6f42c1",
                playedWaveformColor: "#6f42c1",
              },
              // segments must be an array of segment objects, not configuration options
              segments: [], // Start with empty array - segments will be created by user interaction
              // markers must be an array of marker objects, not configuration options
              markers: [], // Start with empty array - markers will be created by user interaction
            },
            function (error, peaksInstance) {
              if (error) {
                console.error("Error initializing Peaks.js:", error);
                showError(
                  "Failed to initialize waveform editor: " + error.message
                );
                return;
              }

              // Store the peaks instance
              peaks = peaksInstance;
              console.log("Peaks.js initialized successfully:", peaks);

              // Set up event listeners
              setupPeaksEvents();
              setupControls();
              populateSongsList();

              console.log("Peaks.js setup complete!");
            }
          );
        } catch (error) {
          console.error("Error initializing Peaks.js:", error);
          showError("Failed to initialize waveform editor: " + error.message);

          // Show fallback message
          document.getElementById("overview-container").innerHTML =
            '<div class="alert alert-warning"><strong>Peaks.js Error:</strong> ' +
            error.message +
            "</div>";
          document.getElementById("zoomview-container").innerHTML =
            '<div class="alert alert-info"><strong>Fallback:</strong> Please use the regular WaveSurfer version for now.</div>';
        }
      }

      // Set up Peaks.js event listeners
      function setupPeaksEvents() {
        // Segment events
        peaks.on("segments.add", (segments) => {
          console.log("Segments added:", segments);
          updateSegmentsList();
        });

        peaks.on("segments.remove", (segments) => {
          console.log("Segments removed:", segments);
          updateSegmentsList();
        });

        peaks.on("segments.update", (segments) => {
          console.log("Segments updated:", segments);
          updateSegmentsList();
        });

        peaks.on("segments.select", (segment) => {
          console.log("Segment selected:", segment);
          selectedSegment = segment;
          updateSelectedSegmentInfo();
        });

        // Playback events
        peaks.on("player.play", () => {
          document.getElementById("playPauseBtn").innerHTML =
            '<i class="bi bi-pause-fill"></i> Pause';
        });

        peaks.on("player.pause", () => {
          document.getElementById("playPauseBtn").innerHTML =
            '<i class="bi bi-play-fill"></i> Play';
        });

        peaks.on("player.timeupdate", (time) => {
          updateCurrentTime(time);
        });
      }

      // Set up control event listeners
      function setupControls() {
        // Play/Pause button
        document
          .getElementById("playPauseBtn")
          .addEventListener("click", () => {
            if (peaks.player.isPlaying()) {
              peaks.player.pause();
            } else {
              peaks.player.play();
            }
          });

        // Stop button
        document.getElementById("stopBtn").addEventListener("click", () => {
          peaks.player.pause();
          peaks.player.seek(0);
        });

        // Zoom control
        document.getElementById("zoom").addEventListener("input", (e) => {
          const zoomLevel = Number(e.target.value);
          peaks.zoom.setZoom(zoomLevel);
        });

        // Reset zoom
        document
          .getElementById("resetZoomBtn")
          .addEventListener("click", () => {
            peaks.zoom.setZoom(1);
            document.getElementById("zoom").value = 1;
          });
      }

      // Update segments list display
      function updateSegmentsList() {
        const segmentsList = document.getElementById("segmentsList");
        const segments = peaks.segments.getSegments();

        if (segments.length === 0) {
          segmentsList.innerHTML =
            '<p class="text-muted">No segments created yet. Drag on the waveform to create segments.</p>';
          return;
        }

        let html = '<div class="list-group">';
        segments.forEach((segment, index) => {
          const assignedSong = segmentSongMap[segment.id];
          const songInfo = assignedSong
            ? `${assignedSong.title} - ${assignedSong.artist}`
            : "Unassigned";

          html += `
                  <div class="list-group-item d-flex justify-content-between align-items-center ${selectedSegment?.id === segment.id ? "active" : ""}"
                       onclick="selectSegment('${segment.id}')">
                      <div>
                          <strong>Segment ${index + 1}</strong><br>
                          <small class="text-muted">${formatTime(segment.startTime)} - ${formatTime(segment.endTime)}</small><br>
                          <small class="text-info">${songInfo}</small>
                      </div>
                      <div>
                          <button class="btn btn-sm btn-outline-danger" onclick="deleteSegment('${segment.id}')">
                              <i class="bi bi-trash"></i>
                          </button>
                      </div>
                  </div>
              `;
        });
        html += "</div>";

        segmentsList.innerHTML = html;
      }

      // Update selected segment info
      function updateSelectedSegmentInfo() {
        const infoDiv = document.getElementById("selectedSegmentInfo");

        if (!selectedSegment) {
          infoDiv.innerHTML =
            '<p class="mb-0 text-muted">No segment selected</p>';
          return;
        }

        const assignedSong = segmentSongMap[selectedSegment.id];
        const songInfo = assignedSong
          ? `${assignedSong.title} - ${assignedSong.artist}`
          : "Unassigned";

        infoDiv.innerHTML = `
              <div class="mb-2">
                  <strong>Segment Details:</strong><br>
                  <small class="text-muted">${formatTime(selectedSegment.startTime)} - ${formatTime(selectedSegment.endTime)}</small><br>
                  <small class="text-info">${songInfo}</small>
              </div>
              <div class="mb-2">
                  <label class="form-label small">Assign Song:</label>
                  <select class="form-select form-select-sm" onchange="assignSongToSegment('${selectedSegment.id}', this.value)">
                      <option value="">Select a song...</option>
                      ${(realSongs.length > 0 ? realSongs : mockSongs).map((song) => `<option value="${song.id}">${song.title} - ${song.artist}</option>`).join("")}
                  </select>
              </div>
          `;
      }

      // Populate songs list
      function populateSongsList() {
        const songsList = document.getElementById("songsList");
        let html = "";

        // Use real songs from the setlist
        const songsToUse = realSongs.length > 0 ? realSongs : mockSongs;

        songsToUse.forEach((song) => {
          html += `
                  <div class="list-group-item">
                      <div class="d-flex justify-content-between align-items-center">
                          <div>
                              <strong>${song.title}</strong><br>
                              <small class="text-muted">${song.artist}</small>
                          </div>
                          <button class="btn btn-sm btn-outline-primary" onclick="assignSongToSelectedSegment(${song.id})">
                              <i class="bi bi-plus"></i> Assign
                          </button>
                      </div>
                  </div>
              `;
        });

        songsList.innerHTML = html;
      }

      // Helper functions
      function selectSegment(segmentId) {
        const segment = peaks.segments.getSegment(segmentId);
        if (segment) {
          peaks.segments.selectSegment(segment);
        }
      }

      function deleteSegment(segmentId) {
        peaks.segments.removeSegment(segmentId);
        delete segmentSongMap[segmentId];
      }

      function assignSongToSegment(segmentId, songId) {
        if (!songId) return;

        const songsToUse = realSongs.length > 0 ? realSongs : mockSongs;
        const song = songsToUse.find((s) => s.id == songId);
        if (song) {
          segmentSongMap[segmentId] = song;
          updateSegmentsList();
          updateSelectedSegmentInfo();
        }
      }

      function assignSongToSelectedSegment(songId) {
        if (selectedSegment) {
          assignSongToSegment(selectedSegment.id, songId);
        }
      }

      function updateCurrentTime(time) {
        document.getElementById("currentTime").textContent = formatTime(time);
      }

      function formatTime(seconds) {
        if (!seconds || isNaN(seconds)) return "0:00";
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs.toString().padStart(2, "0")}`;
      }

      function showError(message) {
        const alertDiv = document.createElement("div");
        alertDiv.className = "alert alert-danger alert-dismissible fade show";
        alertDiv.innerHTML = `
              ${message}
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          `;
        document.body.insertBefore(alertDiv, document.body.firstChild);
      }

      // Initialize when page loads
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Page loaded, starting initialization...");

        // Check if Peaks.js is available immediately (check both cases)
        const PeaksLib = window.peaks || window.Peaks;
        if (typeof PeaksLib === "undefined") {
          console.error("Peaks.js not available immediately");
          console.log("window.peaks:", typeof window.peaks);
          console.log("window.Peaks:", typeof window.Peaks);
          // Try again after a short delay
          setTimeout(function () {
            const PeaksLibDelayed = window.peaks || window.Peaks;
            if (typeof PeaksLibDelayed === "undefined") {
              console.error("Peaks.js still not available after delay");
              document.body.insertAdjacentHTML(
                "afterbegin",
                '<div class="alert alert-danger"><strong>Error:</strong> Peaks.js library failed to load from local files. Check browser console for details.</div>'
              );
              return;
            } else {
              console.log("Peaks.js loaded after delay:", PeaksLibDelayed);
              initializeApp();
            }
          }, 500);
        } else {
          console.log("Peaks.js available immediately:", PeaksLib);
          initializeApp();
        }
      });

      function initializeApp() {
        console.log("Initializing application...");

        // Load the actual recording file
        const audioElement = document.getElementById("audio");
        const recordingPath = "<%= recording.filePath %>";

        console.log("Loading recording:", recordingPath);
        console.log("Audio element before setting src:", audioElement);
        console.log("Audio element src before:", audioElement.src);

        // Set the audio source
        audioElement.src = recordingPath;

        console.log("Audio element src after:", audioElement.src);
        console.log("Audio element readyState:", audioElement.readyState);

        // Initialize Peaks.js when audio is ready
        audioElement.addEventListener("loadedmetadata", function () {
          console.log(
            "Audio metadata loaded, duration:",
            audioElement.duration
          );
          document.getElementById("totalTime").textContent = formatTime(
            Math.floor(audioElement.duration)
          );

          // Add a small delay to ensure DOM is fully ready
          setTimeout(function () {
            console.log("Starting Peaks.js initialization after delay...");
            initPeaks();
          }, 100);
        });

        audioElement.addEventListener("error", function (error) {
          console.error("Audio loading error:", error);
          showError("Failed to load audio file: " + recordingPath);
        });

        // Load the audio
        audioElement.load();
      }
    </script>
  </body>
</html>
